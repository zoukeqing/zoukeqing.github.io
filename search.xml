<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python-start]]></title>
    <url>%2F2018%2F09%2F28%2Fpython-start%2F</url>
    <content type="text"><![CDATA[print(“Hello Python !”) 开始123first_name = &quot;zou&quot;last_name = &quot;keqing&quot;full_name = first_name + &quot; &quot; + last_name 方法title() 来将姓名设置为合适的格式 1234# 方法title() 来将姓名设置为合适的格式message = &quot;hello,&quot; + full_name.title() + &quot; !&quot;print(message)# 输出为hello,Zou Keqing ! 乘方 1print(3 ** 3) ** # 可表示为乘方,输出为27 浮点数 12345print(0.1 + 0.1)print(0.2 + 0.1)# 输出为# 0.2# 0.30000000000000004 避免类型错误 1234age = 23# str()将整数用作字符串message = &quot;Happy &quot; + str(age) + &quot;rd birthday!&quot;print(message) 整数除法 12print(3/2)# Python3 输出为1.5；Python2输出为1 列表123456bicycles = [&apos;trek&apos;, &apos;cannondale&apos;, &apos;redline&apos;, &apos;specialized&apos;]print(bicycles)print(bicycles[0])print(bicycles[0].title())# 返回最后一个元素print(bicycles[-1].title()) 修改、添加和删除元素修改123motorcycles = [&apos;honda&apos;, &apos;yamaha&apos;, &apos;suzuki&apos;]motorcycles[0] = &apos;ducati&apos;print(motorcycles) 添加1234motorcycles.append(&quot;ducati&quot;)print(motorcycles)motorcycles.insert(0,&quot;ducati&quot;)print(motorcycles) 删除del 语句删除元素 12del motorcycles[0]print(motorcycles) pop()方法删除列表末尾的元素 1motorcycles.pop() 添加参数index删除指定的元素 12motorcycles.pop(0)print(motorcycles) 根据值删除元素 12motorcycles.remove(&quot;yamaha&quot;)print(motorcycles) 组织列表sort() 对列表进行永久性排序 123cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]cars.sort()print(cars) 按与字母顺序相反的顺序排列列表元素，为此，只需向sort() 方法传递参数reverse=True 12cars.sort(reverse=True)print(cars) 函数sorted() 对列表进行临时排序 12print(sorted(cars))print(cars) reverse()反转列表元素的排列顺序 12cars.reverse()print(cars) 确定列表的长度 1print(len(cars)) 操作列表for循环 123magicians = [&apos;alice&apos;, &apos;david&apos;, &apos;carolina&apos;]for magician in magicians: print(magician.title() + &quot; !&quot;) 创建数值列表函数range() 123for value in range(1,6): print(value)print(range(1,6)) 使用range()创建数字列表123numbers = list(range(1,6))print(numbers)print(list(range(0,11,2))) 列表解析1print([value **2 for value in range(1,11)]) 指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值; 接下来，编写一个for 循环，用于给表达式提供值，再加上右方括号 使用列表的一部分切片 处理列表的部分元素 12345players = [&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;]print(players[0:3])print(players[:4])print(players[2:])print(players[-3:]) 遍历切片 12for player in players[:4]: print(player.title()) 复制列表，而不是简单的赋值 12345other_players = players[:]print(other_players)other_players.append(&quot;other&quot;)print(players)print(other_players) 输出结果 123[&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;][&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;][&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;, &apos;other&apos;] 元组列表非常适合用于存储在程序运行期间可能变化的数据集。 列表是可以修改的，这对处理网站的用户列表或游戏中的角色列表至关重要。 然而，有时候你需要创建一系列不可修改的元素，元组可以满足这种需求 元组看起来犹如列表，但使用圆括号而不是方括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。 12dimensions = (200, 50)print(str(dimensions[0]) + &quot;,&quot; + str(dimensions[1])) 遍历 12for dimension in dimensions: print(dimension) 修改元组变量 虽然不能修改元组的元素，但可以给存储元组的变量赋值。 12dimensions = (528)print(dimensions) if语句一个简单的示例 123456cars = [&apos;audi&apos;, &apos;bmw&apos;, &apos;subaru&apos;, &apos;toyota&apos;]for car in cars: if car == &apos;bmw&apos;: print(car.upper()) else: print(car.title()) 检查是否相等时不考虑大小写 123car = &apos;Audi&apos;print(car == &apos;audi&apos;)print(car.lower() == &apos;audi&apos;) 检查多个条件使用and检查多个条件 12age = 18print(age &gt;= 18 and age &lt;= 22) 使用or检查多个条件 1print(age &lt;= 16 or age &gt;= 18) 检查特定值是否包含在列表中 123456if 8 in range(5,9): print(8 in range(5,9)) print(&quot;存在&quot;)if 8 not in range(1,7): print(8 not in range(1,7)) print(&quot;不存在&quot;) if-elif-else 结构123456789age = 20if age &lt; 5: print(&quot;age &lt; 5&quot;)elif age &lt; 18: print(&quot;5 &lt;= age &lt; 18&quot;)elif age &lt; 25: print(&quot;18 &lt;= age &lt; 25&quot;)else: print(&quot;age &gt;= 25&quot;) 如果列表为空可返回False 12345car = []if car: print(&quot;car 不为空&quot;)else: print(&quot;car 为空&quot;) 字典一个简单的字典 创建一个空字典 12alien_0 = &#123;&#125;alien_0 = &#123;&apos;color&apos;: &apos;green&apos;, &apos;points&apos;: 5&#125; 访问字典中的值 12print(alien_0[&apos;color&apos;])print(alien_0[&apos;points&apos;]) 添加键值对 123alien_0[&apos;x_position&apos;] = 0alien_0[&apos;y_position&apos;] = 25print(alien_0) 修改字典中的值 12alien_0[&apos;color&apos;] = &apos;yellow&apos;print(alien_0) 删除键值对 12del alien_0[&apos;y_position&apos;]print(alien_0) 遍历字典 123for key,value in alien_0.items(): print(&quot;\nKey: &quot; + key) print(&quot;Value: &quot; + str(value)) 遍历字典中的所有键 12for name in alien_0.keys(): print(name) for name in alien_0 也默认为 for name in alien_0.keys() 按顺序遍历字典中的所有键 使用函数sorted() 来获得按特定顺序排列的键列表的副本 12for name in sorted(alien_0.keys()): print(name) 当然也可以省略.keys()，如for name in sorted(alien_0): 遍历字典中的所有值 12345values = []for value in alien_0.values(): print(value) values.append(str(value))print(values) 这种做法提取字典中所有的值，而没有考虑是否重复。 涉及的值很少时，这也许不是问题，但如果被调查者很多，最终的列表可能包含大量的重复项。 为剔除重复项，可使用集合（set）。集合 类似于列表，但每个元素都必须是独一无二的 通过对包含重复元素的列表调用set()，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合 1234567values = []values_1 = []for value in set(alien_0.values()): values.append(str(value)) values_1.append(value)print(values)print(values_1) 嵌套有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套 示例 创建一个用于存储外星人的空列表 1aliens = [] 创建30个外星人 1234for alien_number in range(30): new_alien = &#123;&apos;id&apos;:alien_number,&apos;color&apos;:&apos;yellow&apos;,&apos;points&apos;:5&#125; aliens.append(new_alien)print(aliens[:5]) 用户输入和while 循环你使用函数input() 时，都应指定清晰而易于明白的提示，准确地指出你希望用户提供什么样的信息指出用户该输入任何信息的提示都行 12name = input(&quot;Please enter your name: &quot;)print(&quot;\nHello, &quot; + name + &quot;!&quot;) 使用int() 来获取数值输入 123age = input(&quot;How old are you?&quot;)age = int(age)print(age) 让用户选择何时退出 123456prompt = &quot;\nTell me something, and I will repeat it back to you:&quot;prompt += &quot;\nEnter &apos;quit&apos; to end the program. &quot;message = &quot;&quot;while message != &apos;quit&apos;: message = input(prompt) print(message) 使用break退出循环 123456789prompt = &quot;\nPlease enter the name of a city you have visited:&quot;prompt += &quot;\n(Enter &apos;quit&apos; when you are finished.) &quot;while True: city = input(prompt) if city == &apos;quit&apos;: break else: print(&quot;I&apos;d love to go to &quot; + city.title() + &quot;!&quot;) 在循环中使用continue 123456current_number = 0while current_number &lt; 10: current_number += 1 if current_number % 2 == 0: continue print(current_number) 使用while循环处理列表和字典 在列表之间移动元素 首先，创建一个待验证用户列表和一个用于存储已验证用户的空列表 12unconfirmed_users = [&apos;alice&apos;, &apos;brian&apos;, &apos;candace&apos;]confirmed_users = [] 验证每个用户，直到没有未验证用户为止 将每个经过验证的列表都移到已验证用户列表中 1234while unconfirmed_users: current_user = unconfirmed_users.pop() print(&quot;Verifying user: &quot; + current_user.title()) confirmed_users.append(current_user) 显示所有已验证的用户 123print(&quot;\nThe following users have been confirmed:&quot;)for confirmed_user in confirmed_users: print(confirmed_user.title()) 删除包含特定值的所有列表元素 12345pets = [&apos;dog&apos;, &apos;cat&apos;, &apos;dog&apos;, &apos;goldfish&apos;, &apos;cat&apos;, &apos;rabbit&apos;, &apos;cat&apos;]print(pets)while &apos;cat&apos; in pets: pets.remove(&apos;cat&apos;)print(pets) 使用用户输入来填充字典 1responses = &#123;&#125; 设置一个标志，指出调查是否继续 123456789101112131415polling_active = Truewhile polling_active: # 提示输入被调查者的名字和回答 name = input(&quot;\nWhat is your name? &quot;) response = input(&quot;Which mountain would you like to climb someday? &quot;) # 将答卷存储在字典中 responses[name] = response # 看看是否还有人要参与调查 repeat = input(&quot;Would you like to let another person respond? (yes/ no) &quot;) if repeat == &apos;no&apos;: polling_active = False# 调查结束，显示结果print(&quot;\n--- Poll Results ---&quot;)for name, response in responses.items(): print(name + &quot; would like to climb &quot; + response + &quot;.&quot;) 函数定义函数 123def greet_user(): print(&quot;Hello!&quot;)greet_user() 传递参数 123def greet_user(username): print(&quot;Hello,&quot; + username.title() + &quot;!&quot;)greet_user(&quot;python&quot;) 关键字实参 关键字实参是传递给函数的名称—值对 关键字实参无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途 1234def greet_user(username,age): print(&quot;Hello,&quot;+username.title()) print(&quot;And age is &quot; + str(age))greet_user(age=20,username=&apos;zoukeqing&apos;) 默认值 12345def greet_user(username,age = 20): print(&quot;Hello,&quot;+username.title()) print(&quot;And age is &quot; + str(age))greet_user(username=&apos;zoukeqing&apos;)greet_user(&apos;zoukeqing&apos;) 返回值返回简单值 1234def get_formatted_name(first_name,last_name): full_name = first_name + &quot; &quot; + last_name return full_name.title()print(get_formatted_name(&apos;zou&apos;,&apos;keqing&apos;)) 让实参变成可选的 1234567891011def get_formatted_name(first_name = &apos;&apos;,middle_name = &apos;&apos;,last_name = &apos;&apos;): if first_name and middle_name: full_name = first_name + &apos; &apos; + middle_name + &apos; &apos; + last_name + &apos;1&apos; elif middle_name: full_name = middle_name + &apos; &apos; + last_name + &apos;2&apos; else: full_name = last_name + &apos;3&apos; return full_nameprint(get_formatted_name(&apos;zou&apos;,&apos;ke&apos;,&apos;qing&apos;))print(get_formatted_name(middle_name=&apos;ke&apos;,last_name=&apos;qing&apos;))print(get_formatted_name(last_name=&apos;keqing&apos;)) 返回字典 1234567def build_person(first_name,last_name,age = &apos;&apos;): person = &#123;&apos;first&apos;:first_name,&apos;last&apos;:last_name&#125; if age: person[&apos;age&apos;] = age return personprint(build_person(&apos;zou&apos;,&apos;keqing&apos;))print(build_person(&apos;zou&apos;,&apos;keqing&apos;,20)) 传递列表 123456def greet_users(names): for name in names: message = &quot;Hello,&quot; + name.title() + &quot;!&quot; print(message)usernames = [&apos;kkk&apos;,&apos;Kevin&apos;,&apos;zoukeqing&apos;]greet_users(usernames) 在函数中修改列表向函数传递列表的原件 1def greet_users(names): 禁止函数修改列表 向函数传递列表的副本而不是原件，这样函数所作的修改都只影响副本，丝毫不影响原件 1def greet_users(names[:]): 传递任意数量的实参 123456def make_pizza(*toppings): print(toppings) for topping in toppings: print(&quot;- &quot; + topping)make_pizza(&apos;pepperoni&apos;)make_pizza(&apos;mushrooms&apos;, &apos;green peppers&apos;, &apos;extra cheese&apos;) 形参名*toppings 中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中。 一个星号* 创建空元组 两个星号** 创建空字典 使用任意数量的关键字实参 在下面的示例中，函数build_profile() 接受名和姓，同时还接受任意数量的关键字实参 123456789def build_profile(first,last,**user_info): profile = &#123;&#125; profile[&apos;first_name&apos;] = first profile[&apos;last_name&apos;] = last for key,value in user_info.items(): profile[key] = value return profileuser_profile = build_profile(&apos;zou&apos;,&apos;keqing&apos;,location = &apos;Gexianshan&apos;,age = 20)print(user_profile) 类创建和使用类模拟小狗的简单尝试 1234567891011121314151617181920212223class Dog(): # 创建一个实例，并初始化属性 def __init__(self,name,age): self.name = name self.age = age self.color = &apos;yellow&apos; def get_description(self): &quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot; long_name = self.name.title() + &apos; &apos; + str(self.age) + &apos; &apos; + self.color return long_name self 指向实例本身的引用，让实例能够访问类中的属性和方法 def sit(self): &quot;&quot;&quot;蹲下&quot;&quot;&quot; print(self.name.title() + &quot; is now sitting.&quot;) def roll_over(self): &quot;&quot;&quot;打滚&quot;&quot;&quot; print(self.name.title() + &quot; rolled over!&quot;) def read_color(self): &quot;&quot;&quot;查看小狗的颜色信息&quot;&quot;&quot; print(self.color) def update_color(self,color): &quot;&quot;&quot;通过方法修改属性的值&quot;&quot;&quot; self.color = color 根据类创建实例 1my_dog = Dog(&quot;willie&quot;,6) 访问属性 1print(my_dog.name) 调用方法 1my_dog.sit() 创建多个实例 123your_dog = Dog(&apos;lucy&apos;,3)print(your_dog.name)your_dog.sit() 通过方法读取 1my_dog.read_color() 直接修改属性的值 12my_dog.color = &apos;white&apos;my_dog.read_color() 通过方法修改属性 12my_dog.update_color(&apos;golden&apos;)my_dog.read_color() 继承子类继承其父类的所有属性和方法，同时还可以定义自己的属性和方法 子类的方法init() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Car: &quot;&quot;&quot;模拟汽车的简单尝试&quot;&quot;&quot; def __init__(self, make, model, year): self.make = make self.model = model self.year = year self.odometer_reading = 0 def get_descriptive_name(self): long_name = str(self.year) + &apos; &apos; + self.make + &apos; &apos; + self.model return long_name.title() def read_odometer(self): print(&quot;This car has &quot; + str(self.odometer_reading) + &quot; miles on it.&quot;) def update_odometer(self, mileage): if mileage &gt;= self.odometer_reading: self.odometer_reading = mileage else: print(&quot;You can&apos;t roll back an odometer!&quot;) def increment_odometer(self, miles): self.odometer_reading += milesclass Battery: &quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot; def __init__(self,battery_size=70): self.battery_size = battery_size def describe_battery(self): &quot;&quot;&quot;打印一条电瓶容量的消息&quot;&quot;&quot; print(&quot;This car has a &quot; + str(self.battery_size) + &quot;-kWh battery.&quot;)class ElectricCar(Car): &quot;&quot;&quot;电动车的独特之处&quot;&quot;&quot; def __init__(self, make, model, year): super().__init__(make, model, year) # 将实例用作属性 self.battery = Battery()my_tesla = ElectricCar(&apos;tesla&apos;, &apos;model s&apos;, 2018)print(my_tesla.get_descriptive_name())my_tesla.battery.describe_battery() 导入类假设在另外一个文件导入整个模块 12import hellomy_tesla = hello.ElectricCar(&apos;tesla&apos;, &apos;model s&apos;, 2018) 导入单个类 1from hello import ElectricCar 导入多个类 1from hello import Car,ElectricCar 文件和异常新建一个pi_digits.txt文件，输入： 1233.1415926535 8979323846 2643383279 读取文件代码如下 123with open(&apos;pi_digits.txt&apos;) as file_object: contents = file_object.read() print(contents) 说明： / 斜杠 和 \ 反斜杠 的使用是在于文件路径在Linux和OS X中用斜杠而Windows系统中用反斜杠 逐行读取 12345with open(&apos;pi_digits.txt&apos;) as file_object: for line in file_object: print(line) 去除每行末尾的换行符 print(line.rstrip()) 创建一个包含文件各行内容的列表 12345with open(&apos;pi_digits.txt&apos;) as file_object: lines = file_object.readlines()for line in lines: print(line.rstrip()) 写入文件写入空文件 12with open(&apos;program.txt&apos;, &apos;w&apos;) as file_object: file_object.write(&quot;I love programing.&quot;) 缺省值默认只读模式打开文件 读取模式 r;写入模式 w;附加模式 a;读取和写入模式 r+ 如果你要写入的文件不存在，函数open() 将自动创建它。 然而，以写入（’w’ ）模式打开文件时千万要小心，因为如果指定的文件已经存在，Python将在返回文件对象前清空该文件。 写入多行 1234with open(&apos;program.txt&apos;, &apos;w&apos;) as file_object: file_object.write(&quot;I love programing.&quot;) file_object.write(&quot;I love creating new game.&quot;) file_object.write(&quot;\nI love programing.&quot;) 附加到文件 12with open(&apos;program.txt&apos;, &apos;a&apos;) as file_object: file_object.write(&quot;\n附加到文件&quot;) 异常try-except代码块 12345print(5/0)try: print(5/0)except ZeroDivisionError: print(&quot;You can&apos;t divide by zero!&quot;) 使用异常避免崩溃 通过将可能引发错误的代码放在try-except 代码块中，可提高这个程序抵御错误的能力 这个示例还包含一个else 代码块；依赖于try 代码块成功执行的代码都应放到else 代码块中 12345678910111213print(&quot;Give me two numbers, and I&apos;ll divide them.&quot;)print(&quot;Enter &apos;q&apos; to quit.&quot;)while True: first_number = input(&quot;\nFirst number: &quot;) if first_number == &apos;q&apos;: break second_number = input(&quot;Second number: &quot;) try: answer = int(first_number) / int(second_number) except ZeroDivisionError: print(&quot;You can&apos;t divide by 0!&quot;) else:print(answer) 处理FileNotFoundError异常 12345678filename = &apos;example.txt&apos;try: with open(filename) as file_object: contents = file_object.read() print(contents)except FileNotFoundError: message = &quot;Sorry,the file &quot; + filename + &quot; does not exist.&quot; print(message) 分析文本 split() 根据一个字符串创建一个单词列表 12title = &apos;Alice in Wonderland&apos;print(title.split()) 使用多个文件 12345678910111213141516171819def count_words(filename): try: with open(filename) as file_object: contents = file_object.read() except FileNotFoundError: # pass语句使发生异常时什么都不做 pass print(&quot;Sorry,the file &quot; + filename + &quot; does not exist.&quot;) else: words = contents.split() num_words = len(words) print(&quot;The file &quot; + filename + &quot; has about &quot; + str(num_words) + &quot; words.&quot;)filename = &apos;program.txt&apos;count_words(filename)# 文件example.txt不存在，但这丝毫不影响这个程序处理其它文件filenames = [&apos;pi_digits.txt&apos;, &apos;example.ext&apos;, &apos;program.txt&apos;]for filename in filenames: count_words(filename) 存储数据先导入json整个模块：import json json.dump() 接受两个参数：要存储的数据以及可用于存储数据的文件对象 json.load() 返回数据，接受一个参数：存储数据的文件对象 测试代码测试函数hello.py文件123def get_formatted_name(first, last): full_name = first + &apos; &apos; + last return full_name 新建另一个测试文件，导入unittest模块，代码格式如下：12345678910111213import unittestfrom hello import get_formatted_nameclass NamesTestCase(unittest.TestCase): # 测试函数 # 创建一个类，继承unittest.TestCase def test_first_last_name(self): # 必须以test开头 formatted_name = get_formatted_name(&apos;Zou&apos;, &apos;Keqing&apos;) self.assertEqual(formatted_name, &apos;Zou Keqing&apos;)unittest.main() 各种断言方法 方法 用途 assertEqual(a,b) a == b assertNotEqual(a,b) a != b assertTrue(x) x 为 True assertFalse(x) x 为 False assertIn(item,list) item 在 list 中 assertNotIn(item,list) item 不在 list 中 测试类hello.py文件 123456789class AddName: def __init__(self): self.names = [] def store_name(self, new_name): self.names.append(new_name) def show_names(self): print(self.names) 同样在另一个测试文件，导入unittest模块，代码格式如下： 123456789101112131415161718192021import unittestfrom hello import AddNameclass TestAddName(unittest.TestCase): def test_store_single_name(self): add_name = AddName() add_name.store_name(&apos;kkk&apos;) self.assertIn(&apos;kkk&apos;, add_name.names) def test_store_three_names(self): add_name = AddName() add_name.store_name(&apos;zou&apos;) add_name.store_name(&apos;yu&apos;) add_name.store_name(&apos;huang&apos;) names = [&apos;zou&apos;, &apos;yu&apos;, &apos;huang&apos;] for name in names: self.assertIn(name, add_name.names)unittest.main() setUp() 方法只需创建对象一次，并在每个测试方法中使用它们12345678910111213141516171819202122232425import unittestfrom hello import AddNameclass TestAddName(unittest.TestCase): def setUp(self): self.add_name = AddName() self.add_name.store_name(&apos;kkk&apos;) self.add_name.store_name(&apos;zou&apos;) self.add_name.store_name(&apos;yu&apos;) self.add_name.store_name(&apos;huang&apos;) name_1 = &apos;ooo&apos; self.add_name.store_name(name_1) def test_store_single_name(self): self.assertIn(&apos;kkk&apos;, self.add_name.names) def test_store_three_names(self): names = [&apos;zou&apos;, &apos;yu&apos;, &apos;huang&apos;] for name in names: self.assertIn(name, self.add_name.names) print(self.add_name.names)unittest.main()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言快速入门]]></title>
    <url>%2F2018%2F09%2F18%2Fr-start%2F</url>
    <content type="text"><![CDATA[START为什么要使用R？ 多数商业统计软件价格不菲，投入成千上万美元都是可能的。而R是免费的！ R拥有顶尖水准的制图功能。如果希望复杂数据可视化，那么R拥有最全面且最强大的一系列可用功能。 R是一个可进行交互式数据分析和探索的强大平台。 R是一个无与伦比的平台，在其上可使用一种简单而直接的方式编写新的统计方法。它易于扩展，并为快速编程实现新方法提供了一套十分自然的语言。 R可运行于多种平台之上，包括Windows、UNIX和Mac OS X。这基本上意味着它可以运行于你所能拥有的任何计算机上。 下面展示R制图功能的一个示例 R的获取与安装 R可以在CRAN（Comprehensive R Archive Network）http://cran.r-project.org 上免费下载。Linux、Mac OS X和Windows都有相应编译好的二进制版本。根据你所选择平台的安装说明进行安装即可。稍 数据结构向量向量适用于存储数值型、字符型或逻辑型数据的一维数组 1234a &lt;- c(1,2,3,4)b &lt;- c("one","two","three")c &lt;- c(TRUE,FALSE)cat(a,b,c) 输出结果为 11 2 3 4 one two three TRUE FALSE 这里，a是数值型向量，b是字符型向量，而c是逻辑型向量。①注意，单个向量中的数据必须拥有相同的类型或模式（数值型、字符型或逻辑型）。同一向量中无法混杂不同模式的数据。 矩阵矩阵是一个二维数组，只是每个元素都拥有相同的模式（数值型、字符型或逻辑性），可通过函数matrix创建矩阵 查看帮助 1&gt; help("matrix") 得到关于 matrix 的 R Documentation ，看下说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687matrix &#123;base&#125; R DocumentationMatricesDescriptionmatrix creates a matrix from the given set of values.as.matrix attempts to turn its argument into a matrix.is.matrix tests if its argument is a (strict) matrix.Usagematrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)as.matrix(x, ...)## S3 method for class &apos;data.frame&apos;as.matrix(x, rownames.force = NA, ...)is.matrix(x)Argumentsdata an optional data vector (including a list or expression vector). Non-atomic classed R objects are coerced by as.vector and all attributes discarded.nrow the desired number of rows.ncol the desired number of columns.byrow logical. If FALSE (the default) the matrix is filled by columns, otherwise the matrix is filled by rows.dimnames A dimnames attribute for the matrix: NULL or a list of length 2 giving the row and column names respectively. An empty list is treated as NULL, and a list of length one as row names. The list can be named, and the list names will be used as names for the dimensions.x an R object.... additional arguments to be passed to or from methods.rownames.force logical indicating if the resulting matrix should have character (rather than NULL) rownames. The default, NA, uses NULL rownames if the data frame has ‘automatic’ row.names or for a zero-row data frame.DetailsIf one of nrow or ncol is not given, an attempt is made to infer it from the length of data and the other parameter. If neither is given, a one-column matrix is returned.If there are too few elements in data to fill the matrix, then the elements in data are recycled. If data has length zero, NA of an appropriate type is used for atomic vectors (0 for raw vectors) and NULL for lists.is.matrix returns TRUE if x is a vector and has a &quot;dim&quot; attribute of length 2 and FALSE otherwise. Note that a data.frame is not a matrix by this test. The function is generic: you can write methods to handle specific classes of objects, see InternalMethods.as.matrix is a generic function. The method for data frames will return a character matrix if there is only atomic columns and any non-(numeric/logical/complex) column, applying as.vector to factors and format to other non-character columns. Otherwise, the usual coercion hierarchy (logical &lt; integer &lt; double &lt; complex) will be used, e.g., all-logical data frames will be coerced to a logical matrix, mixed logical-integer will give a integer matrix, etc.The default method for as.matrix calls as.vector(x), and hence e.g. coerces factors to character vectors.When coercing a vector, it produces a one-column matrix, and promotes the names (if any) of the vector to the rownames of the matrix.is.matrix is a primitive function.The print method for a matrix gives a rectangular layout with dimnames or indices. For a list matrix, the entries of length not one are printed in the form integer,7 indicating the type and length.NoteIf you just want to convert a vector to a matrix, something like dim(x) &lt;- c(nx, ny) dimnames(x) &lt;- list(row_names, col_names)will avoid duplicating x.ReferencesBecker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth &amp; Brooks/Cole.See Alsodata.matrix, which attempts to convert to a numeric matrix.A matrix is the special case of a two-dimensional array.Examplesis.matrix(as.matrix(1:10))!is.matrix(warpbreaks) # data.frame, NOT matrix!warpbreaks[1:10,]as.matrix(warpbreaks[1:10,]) # using as.matrix.data.frame(.) method## Example of setting row and column namesmdat &lt;- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c(&quot;row1&quot;, &quot;row2&quot;), c(&quot;C.1&quot;, &quot;C.2&quot;, &quot;C.3&quot;)))mdat 使用示例 1234567891011&gt; mdat &lt;- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,+ dimnames = list(c("row1", "row2"),+ c("C.1", "C.2", "C.3")))&gt; mdat C.1 C.2 C.3row1 1 2 3row2 11 12 13&gt; print(mdat) C.1 C.2 C.3row1 1 2 3row2 11 12 13 数组数据与矩阵类似，但是维度可以大于2，通过array函数创建 123456789101112131415161718&gt; array(1:3, c(2,4,3)), , 1 [,1] [,2] [,3] [,4][1,] 1 3 2 1[2,] 2 1 3 2, , 2 [,1] [,2] [,3] [,4][1,] 3 2 1 3[2,] 1 3 2 1, , 3 [,1] [,2] [,3] [,4][1,] 2 1 3 2[2,] 3 2 1 3 数据帧数据帧是表格对象，与矩阵不同，每列可以包含不同的数据类型，通过data.frame函数创建 要学会使用help，这次输出 help(&quot;data.frame&quot;) 查看用例，下面给出一个示例 123456789101112&gt; data.frame(1, 1:10, sample(LETTERS[1:3], 10, replace = TRUE)) X1 X1.10 sample.LETTERS.1.3...10..replace...TRUE.1 1 1 C2 1 2 A3 1 3 C4 1 4 A5 1 5 C6 1 6 C7 1 7 A8 1 8 A9 1 9 A10 1 10 B 因子因子标签始终是字符型，无论输入向量是数值型、字符型还是逻辑性。因子将向量存储在向量中的元素的不同值作为标签 因子使用factor()函数创建。nlevels函数给出了级别的计数。 123456apple_colors &lt;- c('green','green','yellow','red','red','red','green')factor_apple &lt;- factor(apple_colors)print(factor_apple)print(nlevels(factor_apple)) 执行上述代码，会产生一下结果 1234[1] green green yellow red red red green Levels: green red yellow[1] 3 列表列表是一些对象成分的集合，包括上面的数据结构。 123456789&gt; list(c(2,5,8),52.8,TRUE)[[1]][1] 2 5 8[[2]][1] 52.8[[3]][1] TRUE 变量对象的名称由大小写字母、数字0-9、点号和下划线组成，名称是区分大小写的，不能以数字开头 ，以字母开头，或者点后面不带数字 变量赋值变量可以使用向左、向右和等于运算符分配值 &lt;- &lt;&lt;- = 叫作左分配符 -&gt; -&gt;&gt; 叫作右分配符 其它运算符冒号运算符 ：12&gt; 1:10 [1] 1 2 3 4 5 6 7 8 9 10 成员运算符 %in%1234567&gt; v1 &lt;- 8&gt; &gt; t &lt;- 1:10&gt; &gt; print(v1 %in% t)[1] TRUE 转置相乘 %*%该运算符用于将矩阵与其转置相乘 123456789&gt; M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)&gt; &gt; t = M %*% t(M)&gt; &gt; print(t) [,1] [,2][1,] 65 82[2,] 82 117 除此之外还需要注意的点 语句之间用分号; 或者 换行符 \n 分隔 print()或cat()函数打印变量的值 cat可以将多个变量打印输出，逗号分隔 变量查找、添加和删除 查找和添加用下标 删除变量用rm()函数 这里就不多介绍了 运算符算术运算符、逻辑运算符、all()和any()、位运算符 算术运算符加法 +123456789&gt; x &lt;- -1:9&gt; x + 1 [1] 0 1 2 3 4 5 6 7 8 9 10&gt; x + 1 [1] 0 1 2 3 4 5 6 7 8 9 10&gt; x + 2 [1] 1 2 3 4 5 6 7 8 9 10 11&gt; x * 2 + 3 [1] 1 3 5 7 9 11 13 15 17 19 21 减法 -1234&gt; v &lt;- c( 2,5.5,6);&gt; t &lt;- c(8, 3, 4);&gt; print(v-t);[1] -6.0 2.5 2.0 乘法 *1234&gt; v &lt;- c( 2,5.5,6);&gt; t &lt;- c(8, 3, 4);&gt; print(v * t);[1] 16.0 16.5 24.0 以下运算符就自己多手动实践啦！不知道的可以多help，比如help(“+”)都可以的 除法 / 求余 %% 求模 %/% 求指数幂 ^ 逻辑运算符大于1234&gt; v &lt;- c(2,5.5,6,9);&gt; t &lt;- c(8,2.5,14,9);&gt; print(v&gt;t);[1] FALSE TRUE FALSE FALSE 这里就不多介绍了 小于 等于 == 小于或等于 &lt;= 大于或等于 &gt;= 不等于 != ~注意~ &amp; | 作用在两个向量相应元素上进行比较 &amp;&amp; 和 || 只作用在对象的第一个元素上 函数函数定义12345function_name &lt;- function(arg_1, arg_2, ...) &#123;Function body&#125; 函数由不同的组件组成，它们是： 函数名称 function_name 参数 arg_1, arg_2, ... 函数体 Function body 返回值 return 内置函数seq() , mean() , max() , sum() , paste() 用户自定义函数123456789new.function &lt;- function(a) &#123; for(i in 1:a) &#123; b &lt;- i^2 print(b)&#125;&#125; 调用函数 1new.function(10) 也可以调用没有参数的函数 123456789new.function &lt;- function() &#123;for(i in 10:20) &#123;print(i^2)&#125;&#125;new.function() 总结为什么要学习R语言？我这里可能往大数据方向发展，有可能往人工智能方向发展，也有可能往算法方向发展。人生有太多的不确定因素，既然自己想着要学那就慢慢来学呗。充满希望的旅途胜过终点的到达。]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown插入图片使用base64格式]]></title>
    <url>%2F2018%2F09%2F17%2Fimage-converted-to-base64%2F</url>
    <content type="text"><![CDATA[摘要：将图片转化为base64格式，MarkDown能显示吗？ 首先制作图片转化为base64格式的h5网页，参考百度经验： https://jingyan.baidu.com/article/ac6a9a5e7abd312b653eac9c.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;图片转base64格式&lt;/title&gt; &lt;style type="text/css"&gt; html&#123;font-family: "microsoft yahei";overflow: hidden;&#125; html&#123;height: 100%;padding: 0;margin: 0;&#125; a&#123;text-decoration: none;outline: none;&#125; .title&#123;color: #ddd;text-shadow: 2px 2px 5px #000;padding: 80px 0px 0px 100px;&#125; .main,.img_main&#123;float: left;background-color: rgba(255,255,255,.7);border-radius: 4px;padding: 20px;margin: 0 3px;&#125; .main&#123;width: 40%;margin-left:100px;&#125; .img_main&#123;max-width: 40%;&#125; .preview&#123;width: 100%;&#125; .select-file&#123;border:1px solid #012456;position: relative;&#125; .select-file:after&#123;content: '';display: block;clear: both;&#125; .select-file-title,.select-file-btn&#123;float: left;line-height: 30px;height: 30px;&#125; .select-file-title&#123;width: 80%;&#125; .select-file-btn&#123;width: 20%;background-color: #012456;text-align: center;color: #fff;transition: background-color .5s;&#125; .select-file-btn:hover&#123;background-color: #1ABC9C;&#125; .base64-text&#123;background-color:transparent;height: 300px;width: calc(100% - 6px);resize:none;overflow: auto;border: 1px solid #012456;margin-top: 10px;word-break: break-all;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 class="title"&gt;图片转Base64&lt;/h1&gt;&lt;div class="main"&gt; &lt;div class="control"&gt; &lt;div class="select-file"&gt; &lt;div class="select-file-title"&gt;&lt;/div&gt; &lt;a href="javascript:;" class="select-file-btn"&gt;选择文件&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="control"&gt; &lt;textarea class="base64-text" readonly&gt;&lt;/textarea&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="img_main"&gt; &lt;img src="" class="preview"/&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt; var inputFile = document.createElement('input'); inputFile.type = 'file'; var selectFile = document.querySelector('.select-file'); var base64Text = document.querySelector('.base64-text'); var preview = document.querySelector('.preview'); var reader = new FileReader(); reader.onload = function()&#123; base64Text.innerText = this.result; preview.src = this.result; &#125;; inputFile.addEventListener('change', function()&#123; selectFile.querySelector('.select-file-title').innerHTML = this.value; if(this.files.length == 0)&#123; base64Text.innerText = ''; return; &#125; var file = inputFile.files[0]; base64Text.placeholder = ''; if(!(/^image/.test(file.type)))&#123; base64Text.placeholder = '不是图片文件'; return; &#125; reader.readAsDataURL(file); &#125;); selectFile.addEventListener('click', function()&#123; inputFile.click(); &#125;);&lt;/script&gt;&lt;!--百度经验：https://jingyan.baidu.com/article/ac6a9a5e7abd312b653eac9c.html--&gt;&lt;/body&gt;&lt;/html&gt; 项目地址为 https://github.com/zoukeqing/img-converted-to-base64 在支持h5的浏览器运行，选择图片文件，等待转换完成 在markdown插入图片，输入base64格式，看下面效果 可F12快捷键打开开发者工具，查看这个图片的src属性的内容 总结markdown插入base64代码还是不会减少这个文件的空间大小，一般使用图床生成图片链接，在markdown引用这个链接不会占用太多的空间，特别是Github pages有空间限制。]]></content>
      <categories>
        <category>Base64</category>
      </categories>
      <tags>
        <tag>Image</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今天分享一个很不错的Chrome扩展程序]]></title>
    <url>%2F2018%2F09%2F14%2Fchrome-plug-in-full-page-screen-capture%2F</url>
    <content type="text"><![CDATA[PLUG IN 完整可靠地捕获当前页面的屏幕截图，无需任何额外权限！ 获取当前浏览器窗口的完整页面截图的最简单方法。单击扩展图标（或按Alt + Shift + P），观看扩展捕获页面的每个部分，然后将其传输到屏幕截图的新选项卡，您可以将其作为图像或PDF下载，甚至只需将其拖动即可到你的桌面。 没有臃肿，没有广告，没有不必要的权限，只是将完整的网页转换为图像的简单方法。 NEW：先进的屏幕捕获技术处理复杂的页面 - 包括内部可滚动元素以及嵌入式iframe - 与任何其他扩展不同。如果您遇到问题，请通过捕获页面上的客户支持标志图标进行报告，以便我们为您和使用它的所有其他人改进扩展程序。 为了截取整个页面，它必须滚动到每个可见部分，所以请耐心等待，因为它可以快速组装所有部分。对于罕见的情况，您的网页太大而Chrome无法存储在一个图片中，它会让您知道并将其拆分为单独标签中的图片。 将结果导出为PNG，JPEG或各种PDF纸张尺寸 - 所有这些都可以从扩展程序的选项中进行配置。 此扩展由独立开发人员运行。在github上查看原始的开源项目：https：//github.com/mrcoles/full-page-screen-capture-chrome-extension 下载安装下载安装有两种方式： 一种是直接从Chrome网上应用店搜索 Full Page Screen Capture 进行直接安装 地址：https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl 另一种通过打包扩展程序，打包成crx格式，使用开发模式进行安装 下面就介绍最后一种的 下载 Full Page Screen Capture 程序，微云链接：https://share.weiyun.com/5GBowk1 密码：73rrb5 下载后地址栏输入 chrome://extensions/ ，打开开发者模式，将文件拖拽到扩展程序那一栏里，并添加扩展程序 随意打开你要捕获页面全屏的，点击右上角程序图标键 比如我输入 zoukeqing.top ,点击右上角功能键，静候，出现的效果如下 Full Page Screen Capture 微云链接：https://share.weiyun.com/5GBowk1 密码：73rrb5]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Plug in</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有Docker？这可能学习Linux最好的方式]]></title>
    <url>%2F2018%2F09%2F13%2Flearning-linux%2F</url>
    <content type="text"><![CDATA[前言BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、 telnet 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。 BusyBox 可运行于多款 POSIX 环境的操作系统中，如 Linux（包括 Android）、Hurd、 FreeBSD 等。 Docker需要掌握的知识点获取镜像不知道具体参数的可以docker pull --help 启动容器启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态 （ stopped ）的容器重新启动。 因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。 处于终止状态的容器，可以通过 docker container start 命令来重新启动。 此外， docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。 新建并启动docker run 启动已终止容器docker container start 终止容器docker container stop 来终止一个运行中的容器 进入容器docker attachdocker attach是Docker自带的命令，下面示例就如何使用该命令 12345678910G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Up 3 seconds upbeat_neumannG:\Docker&gt;docker attach 7fb/ # exitG:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Exited (0) 3 seconds ago upbeat_neumann 可以发现如果从这个 stdin 中 exit，会导致容器的停止。 docker execdocker exec 后面可以跟多个参数，比如 -i -t参数 只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执 行结果仍然可以返回。 当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。 下面示例就如何使用该命令 12345678910111213G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Exited (2) 7 seconds ago upbeat_neumannG:\Docker&gt;docker container start 7fb7fbG:\Docker&gt;docker exec -it 7fb sh/ # exitG:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Up 24 seconds upbeat_neumann 所以若是不希望容器停止的话建议使用docker exec命令 使用–help分别输入 docker attach --help 和 docker exec --help 可以发现它们的区别 123456789101112131415161718192021222324252627282930G:\Docker&gt;docker attach --helpUsage: docker attach [OPTIONS] CONTAINERAttach local standard input, output, and error streams to a running containerOptions: --detach-keys string Override the key sequence for detaching a container --no-stdin Do not attach STDIN --sig-proxy Proxy all received signals to the process (default true)G:\Docker&gt;docker exec --helpUsage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]Run a command in a running containerOptions: -d, --detach Detached mode: run command in the background --detach-keys string Override the key sequence for detaching a container -e, --env list Set environment variables -i, --interactive Keep STDIN open even if not attached --privileged Give extended privileges to the command -t, --tty Allocate a pseudo-TTY -u, --user string Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]) -w, --workdir string Working directory inside the container 从上面Usage可以看到 docker attach 除了参数只能后面带容器，而 docker exec 容器后面就必须有命令。 docker exec 后面带什么命令可由 docker ps -a 查看 123G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Up 14 minutes upbeat_neumann 说明带 sh 命令就行了，如果COMMAND不显示命令，可能一般是/bin/bash或者/bin/sh，下面就试试看 12345G:\Docker&gt;docker exec -it 7fb /bin/sh/ # exitG:\Docker&gt;docker exec -it 7fb /bin/bashOCI runtime exec failed: exec failed: container_linux.go:348: starting container process caused &quot;exec: \&quot;/bin/bash\&quot;: stat /bin/bash: no such file or directory&quot;: unknown 删除容器docker container rm 清理所有处于终止状态的容器docker container ls -a 查看所有已经创建的包括终止状态的容器 1docker container prune 开始获取官方镜像首先 docker search busybox 查看镜像信息，选择官方的一种 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253C:\Users\zoukeqing&gt;docker search busyboxNAME DESCRIPTION STARS OFFICIAL AUTO MATEDbusybox Busybox base image. 1354 [OK]progrium/busybox 68 [OK]hypriot/rpi-busybox-httpd Raspberry Pi compatible Docker Image with a … 44radial/busyboxplus Full-chain, Internet enabled, busybox made f… 20 [OK ]hypriot/armhf-busybox Busybox base image for ARM. 9arm32v7/busybox Busybox base image. 6armhf/busybox Busybox base image. 4yauritux/busybox-curl Busybox with CURL 3p7ppc64/busybox Busybox base image for ppc64. 2prom/busybox Prometheus Busybox Docker base images 2 [OK]odise/busybox-curl 2 [OK]aarch64/busybox Busybox base image. 2s390x/busybox Busybox base image. 2onsi/grace-busybox 2armel/busybox Busybox base image. 2i386/busybox Busybox base image. 2sequenceiq/busybox 2 [OK]arm64v8/busybox Busybox base image. 1spotify/busybox Spotify fork of &lt;https://hub.docker.com/_/bus&gt;… 1ppc64le/busybox Busybox base image. 1trollin/busybox 0cfgarden/garden-busybox 0ggtools/busybox-ubuntu Busybox ubuntu version with extra goodies 0 [OK]concourse/busyboxplus 0amd64/busybox Busybox base image. 0 可以看到最受欢迎的镜像同时带有 OFFICIAL 标记，说明它是官方镜像。 下载镜像使用 docker pull 指令下载镜像 1234567891011C:\Users\zoukeqing&gt;docker pull busyboxUsing default tag: latestlatest: Pulling from library/busybox8c5a7da1afbc: Pull completeDigest: sha256:cb63aa0641a885f54de20f61d152187419e8f6b159ed11a251a09d115fdff9bdStatus: Downloaded newer image for busybox:latest 下面查看镜像可以看到busybox镜像只有1.16MB 12345G:\Docker&gt;docker images busyboxREPOSITORY TAG IMAGE ID CREATED SIZEbusybox latest e1ddd7948a1c 6 weeks ago 1.16MB 启动并运行123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135G:\Docker&gt;docker run -it busybox/ # grepBusyBox v1.29.2 (2018-07-31 20:19:16 UTC) multi-call binary.Usage: grep [-HhnlLoqvsriwFE][-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...Search for PATTERN in FILEs (or stdin) -H Add &apos;filename:&apos; prefix -h Do not add &apos;filename:&apos; prefix -n Add &apos;line_no:&apos; prefix -l Show only names of files that match -L Show only names of files that don&apos;t match -c Show only count of matching lines -o Show only the matching part of line -q Quiet. Return 0 if PATTERN is found, 1 otherwise -v Select non-matching lines -s Suppress open and read errors -r Recurse -i Ignore case -w Match whole words only -x Match whole lines only -F PATTERN is a literal (not regexp) -E PATTERN is an extended regexp -m N Match up to N times per file -A N Print N lines of trailing context -B N Print N lines of leading context -C N Same as &apos;-A N -B N&apos; -e PTRN Pattern to match -f FILE Read pattern from file/ # mountoverlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/ESBXGMI6VSIGTBUC3AVDZMHX3O:/var/lib/docker/overlay2/l/WHC32OFN4EESZIFRWLEFN7HZT4,upperdir=/var/lib/docker/overlay2/acbeca1c1bd1a1af6d26338c48ba5fbee83883c61034220209f76181ddcd08a1/diff,workdir=/var/lib/docker/overlay2/acbeca1c1bd1a1af6d26338c48ba5fbee83883c61034220209f76181ddcd08a1/work)proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)tmpfs on /dev type tmpfs (rw,nosuid,size=65536k,mode=755)devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)sysfs on /sys type sysfs (ro,nosuid,nodev,noexec,relatime)tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,relatime,mode=755)cpuset on /sys/fs/cgroup/cpuset type cgroup (ro,nosuid,nodev,noexec,relatime,cpuset)cpu on /sys/fs/cgroup/cpu type cgroup (ro,nosuid,nodev,noexec,relatime,cpu)cpuacct on /sys/fs/cgroup/cpuacct type cgroup (ro,nosuid,nodev,noexec,relatime,cpuacct)blkio on /sys/fs/cgroup/blkio type cgroup (ro,nosuid,nodev,noexec,relatime,blkio)memory on /sys/fs/cgroup/memory type cgroup (ro,nosuid,nodev,noexec,relatime,memory)devices on /sys/fs/cgroup/devices type cgroup (ro,nosuid,nodev,noexec,relatime,devices)freezer on /sys/fs/cgroup/freezer type cgroup (ro,nosuid,nodev,noexec,relatime,freezer)net_cls on /sys/fs/cgroup/net_cls type cgroup (ro,nosuid,nodev,noexec,relatime,net_cls)perf_event on /sys/fs/cgroup/perf_event type cgroup (ro,nosuid,nodev,noexec,relatime,perf_event)net_prio on /sys/fs/cgroup/net_prio type cgroup (ro,nosuid,nodev,noexec,relatime,net_prio)hugetlb on /sys/fs/cgroup/hugetlb type cgroup (ro,nosuid,nodev,noexec,relatime,hugetlb)pids on /sys/fs/cgroup/pids type cgroup (ro,nosuid,nodev,noexec,relatime,pids)cgroup on /sys/fs/cgroup/systemd type cgroup (ro,nosuid,nodev,noexec,relatime,name=systemd)mqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)/dev/sda1 on /etc/resolv.conf type ext4 (rw,relatime,data=ordered)/dev/sda1 on /etc/hostname type ext4 (rw,relatime,data=ordered)/dev/sda1 on /etc/hosts type ext4 (rw,relatime,data=ordered)shm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)devpts on /dev/console type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)proc on /proc/bus type proc (ro,relatime)proc on /proc/fs type proc (ro,relatime)proc on /proc/irq type proc (ro,relatime)proc on /proc/sys type proc (ro,relatime)proc on /proc/sysrq-trigger type proc (ro,relatime)tmpfs on /proc/acpi type tmpfs (ro,relatime)tmpfs on /proc/kcore type tmpfs (rw,nosuid,size=65536k,mode=755)tmpfs on /proc/keys type tmpfs (rw,nosuid,size=65536k,mode=755)tmpfs on /proc/timer_list type tmpfs (rw,nosuid,size=65536k,mode=755)tmpfs on /proc/sched_debug type tmpfs (rw,nosuid,size=65536k,mode=755)tmpfs on /sys/firmware type tmpfs (ro,relatime)/ # exit -t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。 下面查看状态，已停止，说明自动停止 12345G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; About a minute ago Exited (0) 8 seconds ago upbeat_neumann Linux前面需要Docker的知识也基本掌握了，接下来就开始学习Linux啦。。。 网上有很多教程，可以参考菜鸟教程和易百教程，这里就不介绍啦！ :blush:]]></content>
      <categories>
        <category>Docker</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker入门]]></title>
    <url>%2F2018%2F09%2F12%2Fdocker-started%2F</url>
    <content type="text"><![CDATA[前言 开始之前最好了解什么是Dockers以及为何使用Dockers 什么是Dockers将软件打包成标准化单元，用于开发、装运和部署 为什么要使用Dockers了解容器和容器平台之间的差异，解决日益多样化的IT环境所需的条件以及企业在评估解决方案时应该考虑的能力 对比传统虚拟机总结 特性 容器 虚拟机 启动 秒级 分钟级 硬盘容量 一般为MB 一般为GB 效能 接近原生 比较慢 系统支援量 单机支持上千个容器 一般几十个 基本概念Docker 包括三个基本概念 镜像（ Image ） 容器（ Container ） 仓库（ Repository ） 理解了这三个概念，就理解了 Docker 的整个生命周期。 安装Docker官方网站上都有各种环境下的安装指南，这里就介绍windows 10 pro的安装方法 系统要求Docker for Windows 支持 64 位版本的 Windows 10 Pro，且必须开启 Hyper-V 安装需要windows container建议安装Edge版本的Docker for Windows 运行在 Windows 搜索栏输入 Docker 点击 Docker for Windows ，登陆用户名密码 Get it 镜像加速器常见的镜像加速器有： Docker 官方提供的中国镜像 阿里云加速器 DaoCloud加速器 这里我选择Docker官方提供的中国加速器，右下加右键Docker图标，选择Settings，接着选择Daemon，在Registry mirrors添加 https://registry.docker-cn.com 初体验第一步运行docker --version进行确认 12345678910111213141516171819202122G:\Docker&gt;docker --versionDocker version 18.06.1-ce, build e68fc7aG:\Docker&gt;docker versionClient: Version: 18.06.1-ce API version: 1.38 Go version: go1.10.3 Git commit: e68fc7a Built: Tue Aug 21 17:21:34 2018 OS/Arch: windows/amd64 Experimental: falseServer: Engine: Version: 18.06.1-ce API version: 1.38 (minimum version 1.12) Go version: go1.10.3 Git commit: e68fc7a Built: Tue Aug 21 17:29:02 2018 OS/Arch: linux/amd64 Experimental: true 测试环境拉取镜像并测试环境出现Hello from Docker！说明运行成功 123456789101112131415161718192021222324252627G:\Docker&gt;docker run hello-worldUnable to find image 'hello-world:latest' locallylatest: Pulling from library/hello-worldd1725b59e92d: Pull completeDigest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the "hello-world" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 此时docker images可以查看镜像 123G:\Docker&gt;docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhello-world latest 4ab4c602aa5e 4 days ago 1.84kB 此时删除hello-world遇到异常错误 12G:\Docker&gt;docker rmi hello-worldError response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container 026e29eb7592 is using its referenced image 4ab4c602aa5e 输入docker ps -a查看容器，或者docker container ls -a也可以 12345678G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES026e29eb7592 hello-world &quot;/hello&quot; 10 minutes ago Exited (0) 10 minutes ago inspiring_bartikf4d65a6a8b08 hello-world &quot;/hello&quot; About an hour ago Exited (0) About an hour ago clever_leakeyG:\Docker&gt;docker container ls -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES026e29eb7592 hello-world &quot;/hello&quot; 12 minutes ago Exited (0) 12 minutes ago inspiring_bartikf4d65a6a8b08 hello-world &quot;/hello&quot; About an hour ago Exited (0) About an hour ago 有两个容器在使用hello-world镜像，那么就删除容器 12345678G:\Docker&gt;docker container rm 026026G:\Docker&gt;docker container rm f4df4dG:\Docker&gt;docker container ls -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 最后清理所有处于终止状态的容器，避免文件残留。 1234G:\Docker&gt;docker container pruneWARNING! This will remove all stopped containers.Are you sure you want to continue? [y/N] YTotal reclaimed space: 0B 最后删除镜像。。。 12345G:\Docker&gt;docker rmi hello-worldUntagged: hello-world:latestUntagged: hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788Deleted: sha256:4ab4c602aa5eed5528a6620ff18a1dc4faef0e1ab3a5eddeddb410714478c67fDeleted: sha256:428c97da766c4c13b19088a471de6b622b038f3ae8efa10ec5a37d6d31a2df0b 用ID、镜像名删除镜像这里用ID删除，注意只能删除docker images ls能显示的镜像，只要选前面几个字符就可以删除了，当然也能删除到其它前面几个字符相同的 创建一个Nginx服务器search123456789101112131415161718192021222324252627G:\Docker&gt;docker search nginxNAME DESCRIPTION STARS OFFICIAL AUTOMATEDnginx Official build of Nginx. 9577 [OK]jwilder/nginx-proxy Automated Nginx reverse proxy for docker con… 1402 [OK]richarvey/nginx-php-fpm Container running Nginx + PHP-FPM capable of… 613 [OK]jrcs/letsencrypt-nginx-proxy-companion LetsEncrypt container to use with nginx as p… 405 [OK]kong Open-source Microservice &amp; API Management la… 224 [OK]webdevops/php-nginx Nginx with PHP-FPM 113 [OK]kitematic/hello-world-nginx A light-weight nginx container that demonstr… 108zabbix/zabbix-web-nginx-mysql Zabbix frontend based on Nginx web-server wi… 66 [OK]bitnami/nginx Bitnami nginx Docker Image 58 [OK]1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5 ubuntu-16-nginx-php-phpmyadmin-mysql-5 43 [OK]linuxserver/nginx An Nginx container, brought to you by LinuxS… 39tobi312/rpi-nginx NGINX on Raspberry Pi / armhf 20 [OK]blacklabelops/nginx Dockerized Nginx Reverse Proxy Server. 12 [OK]wodby/drupal-nginx Nginx for Drupal container image 10 [OK]nginxdemos/hello NGINX webserver that serves a simple page co… 8 [OK]webdevops/nginx Nginx container 8 [OK]centos/nginx-18-centos7 Platform for running nginx 1.8 or building n… 7centos/nginx-112-centos7 Platform for running nginx 1.12 or building … 51science/nginx Nginx Docker images that include Consul Temp… 4 [OK]pebbletech/nginx-proxy nginx-proxy sets up a container running ngin… 2 [OK]behance/docker-nginx Provides base OS, patches and stable nginx f… 2 [OK]toccoag/openshift-nginx Nginx reverse proxy for Nice running on same… 1 [OK]travix/nginx NGinx reverse proxy 1 [OK]mailu/nginx Mailu nginx frontend 1 [OK]ansibleplaybookbundle/nginx-apb An APB to deploy NGINX 0 [OK] 选择官方的那种。。。OFFICIAl为OK表示很官方 拉取镜像12345678G:\Docker&gt;docker pull nginxUsing default tag: latestlatest: Pulling from library/nginx802b00ed6f79: Pull completee9d0e0ea682b: Pull completed8b7092b9221: Pull completeDigest: sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d3Status: Downloaded newer image for nginx:latest latest表示最新的 启动Nginx服务器COMMAND123456G:\Docker&gt;docker run -d -p 80:80 --name webserver nginx6a4d793e925f9ea4e7c7f4687279d03109ee33814a6dad12cba628cb5933eec4G:\Docker&gt;docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6a4d793e925f nginx &quot;nginx -g &apos;daemon of…&quot; 16 seconds ago Up 15 seconds 0.0.0.0:80-&gt;80/tcp webserver 浏览器访问确认localhost默认为localhost:80 编辑某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令 123456789101112131415161718192021222324252627282930313233343536G:\Docker&gt;docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6a4d793e925f nginx &quot;nginx -g &apos;daemon of…&quot; 16 seconds ago Up 15 seconds 0.0.0.0:80-&gt;80/tcp webserverG:\Docker&gt;docker attach webserverG:\Docker&gt;docker attach 6G:\Docker&gt;docker exec -it webserver bashroot@6a4d793e925f:/# cd /usr/share/nginxroot@6a4d793e925f:/usr/share/nginx# lshtmlroot@6a4d793e925f:/usr/share/nginx# cat htmlcat: html: Is a directoryroot@6a4d793e925f:/usr/share/nginx# cd /htmlbash: cd: /html: No such file or directoryroot@6a4d793e925f:/usr/share/nginx# vim htmlbash: vim: command not foundroot@6a4d793e925f:/usr/share/nginx# lshtmlroot@6a4d793e925f:/usr/share/nginx# cd htmlroot@6a4d793e925f:/usr/share/nginx/html# ls50x.html index.htmlroot@6a4d793e925f:/usr/share/nginx/html# vim index.htmlbash: vim: command not foundroot@6a4d793e925f:/usr/share/nginx/html# vi index.htmlbash: vi: command not foundroot@6a4d793e925f:/usr/share/nginx/html# cd index.htmlbash: cd: index.html: Not a directoryroot@6a4d793e925f:/usr/share/nginx/html# echo &quot;&lt;h1&gt;Hello Docker,Hello Nginx !&lt;h1/&gt;&quot; &gt; index.htmlbash: !: event not foundroot@6a4d793e925f:/usr/share/nginx/html# echo &quot;&lt;h1&gt;Hello Docker,Hello Nginx&lt;h1/&gt;&quot; &gt; index.htmlroot@6a4d793e925f:/usr/share/nginx/html# cat index.html&lt;h1&gt;Hello Docker,Hello Nginx&lt;h1/&gt;root@6a4d793e925f:/usr/share/nginx/html# exitexit 看到熟悉的Linux命令提示符，发现自己有些命令忘了，本人习惯于windows10 pro。。。 效果。。。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github pages + Hexo 搭建个人博客]]></title>
    <url>%2F2018%2F09%2F11%2Fgithub-hexo-blog%2F</url>
    <content type="text"><![CDATA[安装准备环境（NodeJS+Git) nodejs下载之后，安装路径建议换到除C盘以外的硬盘上，比如我安装在D:\nodejs，其它的就默认next 安装结果输入命令测试结果，若出现版本则安装成功了。npm是NodeJS的包管理工具，可安装、卸载、更新、查看、搜索、发布等等。 改变环境配置npm的全局模块的存放路径以及cache的路径，提前新建好文件，然后输入以下命令 12npm config set prefix "D:\nodejs\Manual_setting\node_global"npm config set cache "D:\nodejs\Manual_setting\node_cache" 设置环境变量，将D:\nodejs\Manual_setting\node_global添加到系统变量path 安装淘宝镜像npm (cnpm)npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm -v 测试结果，cnpm已安装到之前配置好的全局模块 git安装，参考百度 安装Hexo 全局安装 cnpm install hexo-cli -g 本地生成博客环境 1234hexo init Blogcd Blogcnpm installhexo server 浏览器输入 http://localhost:4000 安装主题我选的是NexT 12hexo cleangit clone git@github.com:theme-next/hexo-theme-next.git themes/next 在项目根目录下面修改_config.yml配置文件中的theme属性，将其设置为next 12hexo generatehexo server 现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题 hexo generate 可以简写为 hexo g hexo server 可以间写为 hexo s hexo deloper 可以简写为 hexo d Github Pages设置注册Github账号，创建repository，比如我创建 zoukeqing.github.io，不要勾选README.md文件 域名域名购买我是从阿里云购买 zoukeqing.top ，当然你通过其它渠道购买也可以，只要能域名解析就行 Ping 域名![ping](https://s1.ax1x.com/2018/09/11/ikFbfx.png) 域名解析 新建CNAME文件在 \themes\next\source 目录下新建CNAME文件，无后缀名，加上自己的域名就可以，比如 zoukeqing.top hexo deploy部署在项目根目录下配置文件_config.xml中作如下修改： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:zoukeqing/zoukeqing.github.io.git branch: master 提前安装一个扩展，用于hexo deloper 命令提交到Github项目中 npm install hexo-deployer-git --save 然后在命令 hexo d执行完成部署，打开Github项目文件就可看到提交上来的静态文件 MarkDown写作new 新建一篇文章，会在 \source\_posts 目录下生成 title.md hexo new &quot;title&quot; 新建页面，会在 \source\page 目录下生成 index.md hexo new page &quot;page&quot; 发表草稿，不会在显示页面 hexo new tra &quot;caogao&quot; 将草稿发布 hexo public &quot;chage caogao to title&quot; MarkDown编辑器[Typora](https://typora.io/#) [HexoEditor](https://github.com/zhuzhuyule/HexoEditor) 访问量和文章阅读量主题配置 将配置文件下的 busuanzi_count 的属性 enable 修改为 true ，如果首页也需要文章阅读量可以选用LeanClound，同时将 page_pv 设置为 false LeanCloud 为什么要用LeanCloud是因为不蒜子存在一个缺点是，不能在首页直接看单篇文章的阅读量 创建新应用名为Counter 复制 App ID和App Key 更改主题配置文件 的 leancloud_visitors 1234leancloud_visitors: enable: true app_id: 你的id app_key: 你的key 设置安全域名 不设置安全域名是看不到数字的，同时也将本地 http://localhost:4000 也添加进去，方便本地调试 本地搜索 提前安装一个扩展 cnpm install --save hexo-generator-search 将主题目录下 _config.yml 修改 localhost_search 的属性 enable 为 true 12345678910# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: # enable: false enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 在项目根目录下 _config.yml 添加一下代码 12345search: path: search.xml field: post format: html limit: 1000 设置动态背景在主题配置文件中找到canvas_nest，设置成ture 添加RSS 安装插件 cnpm install hexo-generator-feed --save 在项目根目录下 _config.yml 文件末添加 1plugins: hexo-generate-feed 配置主题_config.yml文件，ctrl+f搜索rss，在后面加上/atom.xml 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 社交链接在主题目录下配置 _config.yml 添加如下 123456789# Social Links# Key is the link label showing to end users.# Value is the target link (E.g. GitHub: https://github.com/iissnan)#social: #LinkLabel: Linksocial: GitHub: https://github.com/halzhan Twitter: https://twitter.com/zoukeqing E-Mail: gmailto:zoukeqing@gmail.com or qqto:1146704412@qq.com 最后的效果]]></content>
      <categories>
        <category>Github</category>
        <category>Github Pages</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[begin]]></title>
    <url>%2F2018%2F09%2F10%2Fbegin%2F</url>
    <content type="text"><![CDATA[开始写作]]></content>
      <categories>
        <category>开始吧</category>
      </categories>
      <tags>
        <tag>begin</tag>
      </tags>
  </entry>
</search>
