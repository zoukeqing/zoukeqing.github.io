<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[今天分享一个很不错的Chrome扩展程序]]></title>
    <url>%2F2018%2F09%2F14%2Fchrome-plug-in-full-page-screen-capture%2F</url>
    <content type="text"><![CDATA[PLUG IN 完整可靠地捕获当前页面的屏幕截图，无需任何额外权限！ 获取当前浏览器窗口的完整页面截图的最简单方法。单击扩展图标（或按Alt + Shift + P），观看扩展捕获页面的每个部分，然后将其传输到屏幕截图的新选项卡，您可以将其作为图像或PDF下载，甚至只需将其拖动即可到你的桌面。 没有臃肿，没有广告，没有不必要的权限，只是将完整的网页转换为图像的简单方法。 NEW：先进的屏幕捕获技术处理复杂的页面 - 包括内部可滚动元素以及嵌入式iframe - 与任何其他扩展不同。如果您遇到问题，请通过捕获页面上的客户支持标志图标进行报告，以便我们为您和使用它的所有其他人改进扩展程序。 为了截取整个页面，它必须滚动到每个可见部分，所以请耐心等待，因为它可以快速组装所有部分。对于罕见的情况，您的网页太大而Chrome无法存储在一个图片中，它会让您知道并将其拆分为单独标签中的图片。 将结果导出为PNG，JPEG或各种PDF纸张尺寸 - 所有这些都可以从扩展程序的选项中进行配置。 此扩展由独立开发人员运行。在github上查看原始的开源项目：https：//github.com/mrcoles/full-page-screen-capture-chrome-extension 下载安装下载安装有两种方式： 一种是直接从Chrome网上应用店搜索 Full Page Screen Capture 进行直接安装 地址：https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl 另一种通过打包扩展程序，打包成crx格式，使用开发模式进行安装 下面就介绍最后一种的 下载 Full Page Screen Capture 程序，微云链接：https://share.weiyun.com/5GBowk1 密码：73rrb5 下载后地址栏输入 chrome://extensions/ ，打开开发者模式，将文件拖拽到扩展程序那一栏里，并添加扩展程序 随意打开你要捕获页面全屏的，点击右上角程序图标键 比如我输入 zoukeqing.top ,点击右上角功能键，静候，出现的效果如下 Full Page Screen Capture 微云链接：https://share.weiyun.com/5GBowk1 密码：73rrb5]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Plug in</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有Docker？这可能学习Linux最好的方式]]></title>
    <url>%2F2018%2F09%2F13%2Flearning-linux%2F</url>
    <content type="text"><![CDATA[前言BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、 telnet 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。 BusyBox 可运行于多款 POSIX 环境的操作系统中，如 Linux（包括 Android）、Hurd、 FreeBSD 等。 Docker需要掌握的知识点获取镜像不知道具体参数的可以docker pull --help 启动容器启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态 （ stopped ）的容器重新启动。 因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。 处于终止状态的容器，可以通过 docker container start 命令来重新启动。 此外， docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。 新建并启动docker run 启动已终止容器docker container start 终止容器docker container stop 来终止一个运行中的容器 进入容器docker attachdocker attach是Docker自带的命令，下面示例就如何使用该命令 12345678910G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Up 3 seconds upbeat_neumannG:\Docker&gt;docker attach 7fb/ # exitG:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Exited (0) 3 seconds ago upbeat_neumann 可以发现如果从这个 stdin 中 exit，会导致容器的停止。 docker execdocker exec 后面可以跟多个参数，比如 -i -t参数 只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执 行结果仍然可以返回。 当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。 下面示例就如何使用该命令 12345678910111213G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Exited (2) 7 seconds ago upbeat_neumannG:\Docker&gt;docker container start 7fb7fbG:\Docker&gt;docker exec -it 7fb sh/ # exitG:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Up 24 seconds upbeat_neumann 所以若是不希望容器停止的话建议使用docker exec命令 使用–help分别输入 docker attach --help 和 docker exec --help 可以发现它们的区别 123456789101112131415161718192021222324252627282930G:\Docker&gt;docker attach --helpUsage: docker attach [OPTIONS] CONTAINERAttach local standard input, output, and error streams to a running containerOptions: --detach-keys string Override the key sequence for detaching a container --no-stdin Do not attach STDIN --sig-proxy Proxy all received signals to the process (default true)G:\Docker&gt;docker exec --helpUsage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]Run a command in a running containerOptions: -d, --detach Detached mode: run command in the background --detach-keys string Override the key sequence for detaching a container -e, --env list Set environment variables -i, --interactive Keep STDIN open even if not attached --privileged Give extended privileges to the command -t, --tty Allocate a pseudo-TTY -u, --user string Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]) -w, --workdir string Working directory inside the container 从上面Usage可以看到 docker attach 除了参数只能后面带容器，而 docker exec 容器后面就必须有命令。 docker exec 后面带什么命令可由 docker ps -a 查看 123G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; 11 hours ago Up 14 minutes upbeat_neumann 说明带 sh 命令就行了，如果COMMAND不显示命令，可能一般是/bin/bash或者/bin/sh，下面就试试看 12345G:\Docker&gt;docker exec -it 7fb /bin/sh/ # exitG:\Docker&gt;docker exec -it 7fb /bin/bashOCI runtime exec failed: exec failed: container_linux.go:348: starting container process caused &quot;exec: \&quot;/bin/bash\&quot;: stat /bin/bash: no such file or directory&quot;: unknown 删除容器docker container rm 清理所有处于终止状态的容器docker container ls -a 查看所有已经创建的包括终止状态的容器 1docker container prune 开始获取官方镜像首先 docker search busybox 查看镜像信息，选择官方的一种 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253C:\Users\zoukeqing&gt;docker search busyboxNAME DESCRIPTION STARS OFFICIAL AUTO MATEDbusybox Busybox base image. 1354 [OK]progrium/busybox 68 [OK]hypriot/rpi-busybox-httpd Raspberry Pi compatible Docker Image with a … 44radial/busyboxplus Full-chain, Internet enabled, busybox made f… 20 [OK ]hypriot/armhf-busybox Busybox base image for ARM. 9arm32v7/busybox Busybox base image. 6armhf/busybox Busybox base image. 4yauritux/busybox-curl Busybox with CURL 3p7ppc64/busybox Busybox base image for ppc64. 2prom/busybox Prometheus Busybox Docker base images 2 [OK]odise/busybox-curl 2 [OK]aarch64/busybox Busybox base image. 2s390x/busybox Busybox base image. 2onsi/grace-busybox 2armel/busybox Busybox base image. 2i386/busybox Busybox base image. 2sequenceiq/busybox 2 [OK]arm64v8/busybox Busybox base image. 1spotify/busybox Spotify fork of &lt;https://hub.docker.com/_/bus&gt;… 1ppc64le/busybox Busybox base image. 1trollin/busybox 0cfgarden/garden-busybox 0ggtools/busybox-ubuntu Busybox ubuntu version with extra goodies 0 [OK]concourse/busyboxplus 0amd64/busybox Busybox base image. 0 可以看到最受欢迎的镜像同时带有 OFFICIAL 标记，说明它是官方镜像。 下载镜像使用 docker pull 指令下载镜像 1234567891011C:\Users\zoukeqing&gt;docker pull busyboxUsing default tag: latestlatest: Pulling from library/busybox8c5a7da1afbc: Pull completeDigest: sha256:cb63aa0641a885f54de20f61d152187419e8f6b159ed11a251a09d115fdff9bdStatus: Downloaded newer image for busybox:latest 下面查看镜像可以看到busybox镜像只有1.16MB 12345G:\Docker&gt;docker images busyboxREPOSITORY TAG IMAGE ID CREATED SIZEbusybox latest e1ddd7948a1c 6 weeks ago 1.16MB 启动并运行123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135G:\Docker&gt;docker run -it busybox/ # grepBusyBox v1.29.2 (2018-07-31 20:19:16 UTC) multi-call binary.Usage: grep [-HhnlLoqvsriwFE][-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...Search for PATTERN in FILEs (or stdin) -H Add &apos;filename:&apos; prefix -h Do not add &apos;filename:&apos; prefix -n Add &apos;line_no:&apos; prefix -l Show only names of files that match -L Show only names of files that don&apos;t match -c Show only count of matching lines -o Show only the matching part of line -q Quiet. Return 0 if PATTERN is found, 1 otherwise -v Select non-matching lines -s Suppress open and read errors -r Recurse -i Ignore case -w Match whole words only -x Match whole lines only -F PATTERN is a literal (not regexp) -E PATTERN is an extended regexp -m N Match up to N times per file -A N Print N lines of trailing context -B N Print N lines of leading context -C N Same as &apos;-A N -B N&apos; -e PTRN Pattern to match -f FILE Read pattern from file/ # mountoverlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/ESBXGMI6VSIGTBUC3AVDZMHX3O:/var/lib/docker/overlay2/l/WHC32OFN4EESZIFRWLEFN7HZT4,upperdir=/var/lib/docker/overlay2/acbeca1c1bd1a1af6d26338c48ba5fbee83883c61034220209f76181ddcd08a1/diff,workdir=/var/lib/docker/overlay2/acbeca1c1bd1a1af6d26338c48ba5fbee83883c61034220209f76181ddcd08a1/work)proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)tmpfs on /dev type tmpfs (rw,nosuid,size=65536k,mode=755)devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)sysfs on /sys type sysfs (ro,nosuid,nodev,noexec,relatime)tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,relatime,mode=755)cpuset on /sys/fs/cgroup/cpuset type cgroup (ro,nosuid,nodev,noexec,relatime,cpuset)cpu on /sys/fs/cgroup/cpu type cgroup (ro,nosuid,nodev,noexec,relatime,cpu)cpuacct on /sys/fs/cgroup/cpuacct type cgroup (ro,nosuid,nodev,noexec,relatime,cpuacct)blkio on /sys/fs/cgroup/blkio type cgroup (ro,nosuid,nodev,noexec,relatime,blkio)memory on /sys/fs/cgroup/memory type cgroup (ro,nosuid,nodev,noexec,relatime,memory)devices on /sys/fs/cgroup/devices type cgroup (ro,nosuid,nodev,noexec,relatime,devices)freezer on /sys/fs/cgroup/freezer type cgroup (ro,nosuid,nodev,noexec,relatime,freezer)net_cls on /sys/fs/cgroup/net_cls type cgroup (ro,nosuid,nodev,noexec,relatime,net_cls)perf_event on /sys/fs/cgroup/perf_event type cgroup (ro,nosuid,nodev,noexec,relatime,perf_event)net_prio on /sys/fs/cgroup/net_prio type cgroup (ro,nosuid,nodev,noexec,relatime,net_prio)hugetlb on /sys/fs/cgroup/hugetlb type cgroup (ro,nosuid,nodev,noexec,relatime,hugetlb)pids on /sys/fs/cgroup/pids type cgroup (ro,nosuid,nodev,noexec,relatime,pids)cgroup on /sys/fs/cgroup/systemd type cgroup (ro,nosuid,nodev,noexec,relatime,name=systemd)mqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)/dev/sda1 on /etc/resolv.conf type ext4 (rw,relatime,data=ordered)/dev/sda1 on /etc/hostname type ext4 (rw,relatime,data=ordered)/dev/sda1 on /etc/hosts type ext4 (rw,relatime,data=ordered)shm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)devpts on /dev/console type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)proc on /proc/bus type proc (ro,relatime)proc on /proc/fs type proc (ro,relatime)proc on /proc/irq type proc (ro,relatime)proc on /proc/sys type proc (ro,relatime)proc on /proc/sysrq-trigger type proc (ro,relatime)tmpfs on /proc/acpi type tmpfs (ro,relatime)tmpfs on /proc/kcore type tmpfs (rw,nosuid,size=65536k,mode=755)tmpfs on /proc/keys type tmpfs (rw,nosuid,size=65536k,mode=755)tmpfs on /proc/timer_list type tmpfs (rw,nosuid,size=65536k,mode=755)tmpfs on /proc/sched_debug type tmpfs (rw,nosuid,size=65536k,mode=755)tmpfs on /sys/firmware type tmpfs (ro,relatime)/ # exit -t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。 下面查看状态，已停止，说明自动停止 12345G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fb6406e7f98 busybox &quot;sh&quot; About a minute ago Exited (0) 8 seconds ago upbeat_neumann Linux前面需要Docker的知识也基本掌握了，接下来就开始学习Linux啦。。。 网上有很多教程，可以参考菜鸟教程和易百教程，这里就不介绍啦！ :blush:]]></content>
      <categories>
        <category>Docker</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker入门]]></title>
    <url>%2F2018%2F09%2F12%2Fdocker-started%2F</url>
    <content type="text"><![CDATA[前言 开始之前最好了解什么是Dockers以及为何使用Dockers 什么是Dockers将软件打包成标准化单元，用于开发、装运和部署 为什么要使用Dockers了解容器和容器平台之间的差异，解决日益多样化的IT环境所需的条件以及企业在评估解决方案时应该考虑的能力 对比传统虚拟机总结 特性 容器 虚拟机 启动 秒级 分钟级 硬盘容量 一般为MB 一般为GB 效能 接近原生 比较慢 系统支援量 单机支持上千个容器 一般几十个 基本概念Docker 包括三个基本概念 镜像（ Image ） 容器（ Container ） 仓库（ Repository ） 理解了这三个概念，就理解了 Docker 的整个生命周期。 安装Docker官方网站上都有各种环境下的安装指南，这里就介绍windows 10 pro的安装方法 系统要求Docker for Windows 支持 64 位版本的 Windows 10 Pro，且必须开启 Hyper-V 安装需要windows container建议安装Edge版本的Docker for Windows 运行在 Windows 搜索栏输入 Docker 点击 Docker for Windows ，登陆用户名密码 Get it 镜像加速器常见的镜像加速器有： Docker 官方提供的中国镜像 阿里云加速器 DaoCloud加速器 这里我选择Docker官方提供的中国加速器，右下加右键Docker图标，选择Settings，接着选择Daemon，在Registry mirrors添加 https://registry.docker-cn.com 初体验第一步运行docker --version进行确认 12345678910111213141516171819202122G:\Docker&gt;docker --versionDocker version 18.06.1-ce, build e68fc7aG:\Docker&gt;docker versionClient: Version: 18.06.1-ce API version: 1.38 Go version: go1.10.3 Git commit: e68fc7a Built: Tue Aug 21 17:21:34 2018 OS/Arch: windows/amd64 Experimental: falseServer: Engine: Version: 18.06.1-ce API version: 1.38 (minimum version 1.12) Go version: go1.10.3 Git commit: e68fc7a Built: Tue Aug 21 17:29:02 2018 OS/Arch: linux/amd64 Experimental: true 测试环境拉取镜像并测试环境出现Hello from Docker！说明运行成功 123456789101112131415161718192021222324252627G:\Docker&gt;docker run hello-worldUnable to find image 'hello-world:latest' locallylatest: Pulling from library/hello-worldd1725b59e92d: Pull completeDigest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the "hello-world" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 此时docker images可以查看镜像 123G:\Docker&gt;docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhello-world latest 4ab4c602aa5e 4 days ago 1.84kB 此时删除hello-world遇到异常错误 12G:\Docker&gt;docker rmi hello-worldError response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container 026e29eb7592 is using its referenced image 4ab4c602aa5e 输入docker ps -a查看容器，或者docker container ls -a也可以 12345678G:\Docker&gt;docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES026e29eb7592 hello-world &quot;/hello&quot; 10 minutes ago Exited (0) 10 minutes ago inspiring_bartikf4d65a6a8b08 hello-world &quot;/hello&quot; About an hour ago Exited (0) About an hour ago clever_leakeyG:\Docker&gt;docker container ls -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES026e29eb7592 hello-world &quot;/hello&quot; 12 minutes ago Exited (0) 12 minutes ago inspiring_bartikf4d65a6a8b08 hello-world &quot;/hello&quot; About an hour ago Exited (0) About an hour ago 有两个容器在使用hello-world镜像，那么就删除容器 12345678G:\Docker&gt;docker container rm 026026G:\Docker&gt;docker container rm f4df4dG:\Docker&gt;docker container ls -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 最后清理所有处于终止状态的容器，避免文件残留。 1234G:\Docker&gt;docker container pruneWARNING! This will remove all stopped containers.Are you sure you want to continue? [y/N] YTotal reclaimed space: 0B 最后删除镜像。。。 12345G:\Docker&gt;docker rmi hello-worldUntagged: hello-world:latestUntagged: hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788Deleted: sha256:4ab4c602aa5eed5528a6620ff18a1dc4faef0e1ab3a5eddeddb410714478c67fDeleted: sha256:428c97da766c4c13b19088a471de6b622b038f3ae8efa10ec5a37d6d31a2df0b 用ID、镜像名删除镜像这里用ID删除，注意只能删除docker images ls能显示的镜像，只要选前面几个字符就可以删除了，当然也能删除到其它前面几个字符相同的 创建一个Nginx服务器search123456789101112131415161718192021222324252627G:\Docker&gt;docker search nginxNAME DESCRIPTION STARS OFFICIAL AUTOMATEDnginx Official build of Nginx. 9577 [OK]jwilder/nginx-proxy Automated Nginx reverse proxy for docker con… 1402 [OK]richarvey/nginx-php-fpm Container running Nginx + PHP-FPM capable of… 613 [OK]jrcs/letsencrypt-nginx-proxy-companion LetsEncrypt container to use with nginx as p… 405 [OK]kong Open-source Microservice &amp; API Management la… 224 [OK]webdevops/php-nginx Nginx with PHP-FPM 113 [OK]kitematic/hello-world-nginx A light-weight nginx container that demonstr… 108zabbix/zabbix-web-nginx-mysql Zabbix frontend based on Nginx web-server wi… 66 [OK]bitnami/nginx Bitnami nginx Docker Image 58 [OK]1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5 ubuntu-16-nginx-php-phpmyadmin-mysql-5 43 [OK]linuxserver/nginx An Nginx container, brought to you by LinuxS… 39tobi312/rpi-nginx NGINX on Raspberry Pi / armhf 20 [OK]blacklabelops/nginx Dockerized Nginx Reverse Proxy Server. 12 [OK]wodby/drupal-nginx Nginx for Drupal container image 10 [OK]nginxdemos/hello NGINX webserver that serves a simple page co… 8 [OK]webdevops/nginx Nginx container 8 [OK]centos/nginx-18-centos7 Platform for running nginx 1.8 or building n… 7centos/nginx-112-centos7 Platform for running nginx 1.12 or building … 51science/nginx Nginx Docker images that include Consul Temp… 4 [OK]pebbletech/nginx-proxy nginx-proxy sets up a container running ngin… 2 [OK]behance/docker-nginx Provides base OS, patches and stable nginx f… 2 [OK]toccoag/openshift-nginx Nginx reverse proxy for Nice running on same… 1 [OK]travix/nginx NGinx reverse proxy 1 [OK]mailu/nginx Mailu nginx frontend 1 [OK]ansibleplaybookbundle/nginx-apb An APB to deploy NGINX 0 [OK] 选择官方的那种。。。OFFICIAl为OK表示很官方 拉取镜像12345678G:\Docker&gt;docker pull nginxUsing default tag: latestlatest: Pulling from library/nginx802b00ed6f79: Pull completee9d0e0ea682b: Pull completed8b7092b9221: Pull completeDigest: sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d3Status: Downloaded newer image for nginx:latest latest表示最新的 启动Nginx服务器COMMAND123456G:\Docker&gt;docker run -d -p 80:80 --name webserver nginx6a4d793e925f9ea4e7c7f4687279d03109ee33814a6dad12cba628cb5933eec4G:\Docker&gt;docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6a4d793e925f nginx &quot;nginx -g &apos;daemon of…&quot; 16 seconds ago Up 15 seconds 0.0.0.0:80-&gt;80/tcp webserver 浏览器访问确认localhost默认为localhost:80 编辑某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令 123456789101112131415161718192021222324252627282930313233343536G:\Docker&gt;docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6a4d793e925f nginx &quot;nginx -g &apos;daemon of…&quot; 16 seconds ago Up 15 seconds 0.0.0.0:80-&gt;80/tcp webserverG:\Docker&gt;docker attach webserverG:\Docker&gt;docker attach 6G:\Docker&gt;docker exec -it webserver bashroot@6a4d793e925f:/# cd /usr/share/nginxroot@6a4d793e925f:/usr/share/nginx# lshtmlroot@6a4d793e925f:/usr/share/nginx# cat htmlcat: html: Is a directoryroot@6a4d793e925f:/usr/share/nginx# cd /htmlbash: cd: /html: No such file or directoryroot@6a4d793e925f:/usr/share/nginx# vim htmlbash: vim: command not foundroot@6a4d793e925f:/usr/share/nginx# lshtmlroot@6a4d793e925f:/usr/share/nginx# cd htmlroot@6a4d793e925f:/usr/share/nginx/html# ls50x.html index.htmlroot@6a4d793e925f:/usr/share/nginx/html# vim index.htmlbash: vim: command not foundroot@6a4d793e925f:/usr/share/nginx/html# vi index.htmlbash: vi: command not foundroot@6a4d793e925f:/usr/share/nginx/html# cd index.htmlbash: cd: index.html: Not a directoryroot@6a4d793e925f:/usr/share/nginx/html# echo &quot;&lt;h1&gt;Hello Docker,Hello Nginx !&lt;h1/&gt;&quot; &gt; index.htmlbash: !: event not foundroot@6a4d793e925f:/usr/share/nginx/html# echo &quot;&lt;h1&gt;Hello Docker,Hello Nginx&lt;h1/&gt;&quot; &gt; index.htmlroot@6a4d793e925f:/usr/share/nginx/html# cat index.html&lt;h1&gt;Hello Docker,Hello Nginx&lt;h1/&gt;root@6a4d793e925f:/usr/share/nginx/html# exitexit 看到熟悉的Linux命令提示符，发现自己有些命令忘了，本人习惯于windows10 pro。。。 效果。。。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github pages + Hexo 搭建个人博客]]></title>
    <url>%2F2018%2F09%2F11%2Fgithub-hexo-blog%2F</url>
    <content type="text"><![CDATA[安装准备环境（NodeJS+Git) nodejs下载之后，安装路径建议换到除C盘以外的硬盘上，比如我安装在D:\nodejs，其它的就默认next 安装结果输入命令测试结果，若出现版本则安装成功了。npm是NodeJS的包管理工具，可安装、卸载、更新、查看、搜索、发布等等。 改变环境配置npm的全局模块的存放路径以及cache的路径，提前新建好文件，然后输入以下命令 12npm config set prefix "D:\nodejs\Manual_setting\node_global"npm config set cache "D:\nodejs\Manual_setting\node_cache" 设置环境变量，将D:\nodejs\Manual_setting\node_global添加到系统变量path 安装淘宝镜像npm (cnpm)npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm -v 测试结果，cnpm已安装到之前配置好的全局模块 git安装，参考百度 安装Hexo 全局安装 cnpm install hexo-cli -g 本地生成博客环境 1234hexo init Blogcd Blogcnpm installhexo server 浏览器输入 http://localhost:4000 安装主题我选的是NexT 12hexo cleangit clone git@github.com:theme-next/hexo-theme-next.git themes/next 在项目根目录下面修改_config.yml配置文件中的theme属性，将其设置为next 12hexo generatehexo server 现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题 hexo generate 可以简写为 hexo g hexo server 可以间写为 hexo s hexo deloper 可以简写为 hexo d Github Pages设置注册Github账号，创建repository，比如我创建 zoukeqing.github.io，不要勾选README.md文件 域名域名购买我是从阿里云购买 zoukeqing.top ，当然你通过其它渠道购买也可以，只要能域名解析就行 Ping 域名![ping](https://s1.ax1x.com/2018/09/11/ikFbfx.png) 域名解析 新建CNAME文件在 \themes\next\source 目录下新建CNAME文件，无后缀名，加上自己的域名就可以，比如 zoukeqing.top hexo deploy部署在项目根目录下配置文件_config.xml中作如下修改： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:zoukeqing/zoukeqing.github.io.git branch: master 提前安装一个扩展，用于hexo deloper 命令提交到Github项目中 npm install hexo-deployer-git --save 然后在命令 hexo d执行完成部署，打开Github项目文件就可看到提交上来的静态文件 MarkDown写作new 新建一篇文章，会在 \source\_posts 目录下生成 title.md hexo new &quot;title&quot; 新建页面，会在 \source\page 目录下生成 index.md hexo new page &quot;page&quot; 发表草稿，不会在显示页面 hexo new tra &quot;caogao&quot; 将草稿发布 hexo public &quot;chage caogao to title&quot; MarkDown编辑器[Typora](https://typora.io/#) [HexoEditor](https://github.com/zhuzhuyule/HexoEditor) 访问量和文章阅读量主题配置 将配置文件下的 busuanzi_count 的属性 enable 修改为 true ，如果首页也需要文章阅读量可以选用LeanClound，同时将 page_pv 设置为 false LeanCloud 为什么要用LeanCloud是因为不蒜子存在一个缺点是，不能在首页直接看单篇文章的阅读量 创建新应用名为Counter 复制 App ID和App Key 更改主题配置文件 的 leancloud_visitors 1234leancloud_visitors: enable: true app_id: 你的id app_key: 你的key 设置安全域名 不设置安全域名是看不到数字的，同时也将本地 http://localhost:4000 也添加进去，方便本地调试 本地搜索 提前安装一个扩展 cnpm install --save hexo-generator-search 将主题目录下 _config.yml 修改 localhost_search 的属性 enable 为 true 12345678910# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: # enable: false enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 在项目根目录下 _config.yml 添加一下代码 12345search: path: search.xml field: post format: html limit: 1000 设置动态背景在主题配置文件中找到canvas_nest，设置成ture 添加RSS 安装插件 cnpm install hexo-generator-feed --save 在项目根目录下 _config.yml 文件末添加 1plugins: hexo-generate-feed 配置主题_config.yml文件，ctrl+f搜索rss，在后面加上/atom.xml 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 社交链接在主题目录下配置 _config.yml 添加如下 123456789# Social Links# Key is the link label showing to end users.# Value is the target link (E.g. GitHub: https://github.com/iissnan)#social: #LinkLabel: Linksocial: GitHub: https://github.com/halzhan Twitter: https://twitter.com/zoukeqing E-Mail: gmailto:zoukeqing@gmail.com or qqto:1146704412@qq.com 最后的效果]]></content>
      <categories>
        <category>Github</category>
        <category>Github Pages</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[begin]]></title>
    <url>%2F2018%2F09%2F10%2Fbegin%2F</url>
    <content type="text"><![CDATA[开始写作]]></content>
      <categories>
        <category>开始吧</category>
      </categories>
      <tags>
        <tag>begin</tag>
      </tags>
  </entry>
</search>
