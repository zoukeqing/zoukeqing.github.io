<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zoukeqing&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zoukeqing.top/"/>
  <updated>2018-09-29T10:08:29.867Z</updated>
  <id>https://zoukeqing.top/</id>
  
  <author>
    <name>zoukeqing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python数据可视化matplotlib库</title>
    <link href="https://zoukeqing.top/2018/09/29/python-data-visualization-matplotlib/"/>
    <id>https://zoukeqing.top/2018/09/29/python-data-visualization-matplotlib/</id>
    <published>2018-09-29T10:04:39.000Z</published>
    <updated>2018-09-29T10:08:29.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>每次创建文件加上，避免中文乱码问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># -*-coding:utf-8-*-</span><br></pre></td></tr></table></figure></p><p>如果还遇到中文乱码问题可在Python文件代码上右键选择File Encoding，并选择UTF-8编码格式</p><p>matplotlib : <a href="https://matplotlib.org/" target="_blank" rel="noopener">https://matplotlib.org/</a></p><p>matplotlib各种示例画廊，单击图标即可查看用于生成图表的代码</p><p>绘制图之前注意安装matplotlib</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><p>pip安装包加速器国内镜像，命令添加-i参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="绘制简单的折线图"><a href="#绘制简单的折线图" class="headerlink" title="绘制简单的折线图"></a>绘制简单的折线图</h1><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">squares = [1, 2, 4, 5, 8]</span><br><span class="line">plt.plot(squares)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624b3ccaa2852f?w=640&amp;h=480&amp;f=png&amp;s=22700" alt=""></p><p>修改标签文字和线条粗细<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">squares = [1, 2, 4, 5, 8]</span><br><span class="line">plt.plot(squares)</span><br><span class="line"># 设置图标标题，并给坐标轴加上标签</span><br><span class="line">plt.title(&quot;Hello Squares&quot;, fontsize=24)</span><br><span class="line">plt.xlabel(&quot;Value&quot;, fontsize=14)</span><br><span class="line">plt.ylabel(&quot;Square of Value&quot;, fontsize=14)</span><br><span class="line"># 设置刻度标记的大小</span><br><span class="line">plt.tick_params(axis=&apos;both&apos;,labelsize=14)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624b56f1580993?w=640&amp;h=480&amp;f=png&amp;s=32297" alt=""><br>校正图形</p><p>仔细观察横坐标发现坐标的点是从零开始的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">squares = [1, 2, 4, 5, 8]</span><br><span class="line">input_value = [1, 2, 3, 4, 5]</span><br><span class="line">plt.plot(input_value, squares, linewidth=5)</span><br><span class="line"># 设置图标标题，并给坐标轴加上标签</span><br><span class="line">plt.title(&quot;Hello Squares&quot;, fontsize=24)</span><br><span class="line">plt.xlabel(&quot;Value&quot;, fontsize=14)</span><br><span class="line">plt.ylabel(&quot;Square of Value&quot;, fontsize=14)</span><br><span class="line"># 设置刻度标记的大小</span><br><span class="line">plt.tick_params(axis=&apos;both&apos;,labelsize=14)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624b93404b4e82?w=640&amp;h=480&amp;f=png&amp;s=32697" alt=""></p><h1 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h1><p>使用scatter()绘制散点图并设置其样式</p><h2 id="绘制单个点"><a href="#绘制单个点" class="headerlink" title="绘制单个点"></a>绘制单个点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#</span><br><span class="line">plt.scatter(5, 8)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624ba2f56a723b?w=640&amp;h=480&amp;f=png&amp;s=19412" alt=""></p><p>添加样式，使其更加有趣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib as mpl</span><br><span class="line"></span><br><span class="line"># 解决中文乱码问题</span><br><span class="line"># sans-serif就是无衬线字体，是一种通用字体族。</span><br><span class="line"># 常见的无衬线字体有 Trebuchet MS, Tahoma, Verdana, Arial, Helvetica, 中文的幼圆、隶书等等。</span><br><span class="line"># 指定默认字体 SimHei为黑体</span><br><span class="line">mpl.rcParams[&apos;font.sans-serif&apos;] = [&apos;SimHei&apos;]</span><br><span class="line"># 用来正常显示负号</span><br><span class="line">mpl.rcParams[&apos;axes.unicode_minus&apos;] = False</span><br><span class="line">plt.scatter(-5, 8, s=200)</span><br><span class="line"># 设置图表标题并给坐标轴加上标签</span><br><span class="line">plt.title(u&quot;单点散点图&quot;, fontsize=24)</span><br><span class="line">plt.xlabel(&quot;Value&quot;, fontsize=14)</span><br><span class="line">plt.ylabel(&quot;Square of Value&quot;, fontsize=14)</span><br><span class="line"># 设置刻度标记的大小</span><br><span class="line">plt.tick_params(axis=&apos;both&apos;, which=&apos;major&apos;, labelsize=14)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624baf67ec4e20?w=640&amp;h=480&amp;f=png&amp;s=31873" alt=""></p><h2 id="绘制一系列点"><a href="#绘制一系列点" class="headerlink" title="绘制一系列点"></a>绘制一系列点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">#</span><br><span class="line">x_value = [1, 2, 3, 4, 5]</span><br><span class="line">y_value = [1, 2, 4, 5, 8]</span><br><span class="line">plt.scatter(x_value, y_value, s=100)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624bb7bed27cf4?w=640&amp;h=480&amp;f=png&amp;s=14345" alt=""></p><p>自动计算数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x_values = list(range(1, 1001))</span><br><span class="line">y_values = [x ** 2 for x in x_values]</span><br><span class="line">plt.scatter(x_values, y_values, s=40)</span><br><span class="line"># 设置每个坐标轴的取值范围</span><br><span class="line">plt.axis([0, 1100, 0, 1100000])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624bbe25468af3?w=640&amp;h=480&amp;f=png&amp;s=21296" alt=""></p><p>删除数据点的轮廓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x_values, y_values, s=40, edgecolors=&apos;none&apos;)</span><br></pre></td></tr></table></figure><p>自定义颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x_values, y_values, s=40, edgecolors=&apos;none&apos;, c=&apos;yellow&apos;)</span><br><span class="line">plt.scatter(x_values, y_values, s=40, edgecolors=&apos;none&apos;, c=(0, 0.8, 0.8))</span><br></pre></td></tr></table></figure><p>使用颜色映射</p><p>颜色映射是一系列颜色，从起始颜色渐变到结束颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x_values, y_values, s=40, edgecolors=&apos;none&apos;, c=y_values, cmap=plt.cm.Blues)</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624bd10b269fa2?w=640&amp;h=480&amp;f=png&amp;s=27171" alt=""></p><p>自动保存图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x_values = list(range(1, 1001))</span><br><span class="line">y_values = [x ** 2 for x in x_values]</span><br><span class="line">plt.scatter(x_values, y_values, s=40)</span><br><span class="line"># 设置每个坐标轴的取值范围</span><br><span class="line">plt.axis([0, 1100, 0, 1100000])</span><br><span class="line">bbox_inches=&apos;tight&apos; 指定将图表多余的空白区域裁剪掉</span><br><span class="line"># 如果要保留图表周围多余的空白区域，可省略bbox_inches实参</span><br><span class="line">plt.savefig(&apos;save_plot.png&apos;, bbox_inches=&apos;tight&apos;)</span><br></pre></td></tr></table></figure><h1 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h1><p>什么是随机漫步？类似水滴中的分子运动，分子受到挤压而产生运动</p><p>创建RandomWalk() 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from random import choice</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RandomWalk:</span><br><span class="line">    &quot;&quot;&quot;生成随机漫步的类&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, num_points=5000):</span><br><span class="line">        &quot;&quot;&quot;初始化随机漫步的属性&quot;&quot;&quot;</span><br><span class="line">        self.num_points = num_points</span><br><span class="line">        # 所有随机漫步都始于(0,0)</span><br><span class="line">        self.x_values = [0]</span><br><span class="line">        self.y_values = [0]</span><br><span class="line"></span><br><span class="line">    def fill_walk(self):</span><br><span class="line">        &quot;&quot;&quot;计算随机漫步包含的所有点&quot;&quot;&quot;</span><br><span class="line">        # 生成漫步包含的点，并决定每次漫步的方向</span><br><span class="line">        # 不断漫步，也就是遍历列表</span><br><span class="line">        while len(self.x_values) &lt; self.num_points:</span><br><span class="line">            # 给x_direction 选择一个值，结果要么是表示向右走的1，要么是表示向左走的-1</span><br><span class="line">            x_direction = choice([-1, 1])</span><br><span class="line">            # 随机地选择一个0~4之间的整数，决定走多远</span><br><span class="line">            x_distance = choice([0, 1, 2, 3, 4])</span><br><span class="line">            # 将移动方向乘以移动距离，确定沿 x 和 y 轴移动的距离</span><br><span class="line">            # x_step 为正，将向右移动，为负将向左移动，而为零将垂直移动</span><br><span class="line">            x_step = x_direction * x_distance</span><br><span class="line">            # y轴也类似</span><br><span class="line">            y_direction = choice([-1, 1])</span><br><span class="line">            y_distance = choice([0, 1, 2, 3, 4])</span><br><span class="line">            y_step = y_direction * y_distance</span><br><span class="line">            # 拒绝原地踏步</span><br><span class="line">            if x_step == 0 and y_step ==0:</span><br><span class="line">                continue</span><br><span class="line">            # 计算下一个点的x和y值，-1指示列表最后一个数</span><br><span class="line">            next_x = self.x_values[-1] + x_step</span><br><span class="line">            next_y = self.y_values[-1] + y_step</span><br><span class="line">            # 附加到列表末尾</span><br><span class="line">            self.x_values.append(next_x)</span><br><span class="line">            self.y_values.append(next_y)</span><br></pre></td></tr></table></figure><ul><li><strong>简单绘制随机漫步图</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rw = RandomWalk()</span><br><span class="line">rw.fill_walk()</span><br><span class="line">plt.scatter(rw.x_values, rw.y_values, s=15)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624c075248ef78?w=640&amp;h=480&amp;f=png&amp;s=59880" alt=""></p><ul><li><strong>模拟多次随机漫步</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    创建一个RandomWalk实例，并将其包含的点都绘制出来</span><br><span class="line">    rw = RandomWalk()</span><br><span class="line">    rw.fill_walk()</span><br><span class="line">    plt.scatter(rw.x_values, rw.y_values, s=15)</span><br><span class="line">    plt.show()</span><br><span class="line">    keep_running = input(&quot;Make another walk? (y/n): &quot;)</span><br><span class="line">    if keep_running == &apos;n&apos;:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><ul><li><strong>设置随机漫步图的样式——着色</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rw = RandomWalk()</span><br><span class="line">rw.fill_walk()</span><br><span class="line">point_numbers = list(range(rw.num_points))</span><br><span class="line">plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.prism, edgecolors=&apos;none&apos;, s=15)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624c0d0a597f1f?w=640&amp;h=480&amp;f=png&amp;s=148566" alt=""></p><ul><li><strong>绘制起点和终点</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rw = RandomWalk()</span><br><span class="line">rw.fill_walk()</span><br><span class="line">point_numbers = list(range(rw.num_points))</span><br><span class="line">plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, edgecolors=&apos;none&apos;, s=15)</span><br><span class="line">plt.scatter(0, 0, c=&apos;green&apos;, edgecolors=&apos;none&apos;, s=100)</span><br><span class="line">plt.scatter(rw.x_values[-1], rw.y_values[-1], c=&apos;red&apos;, edgecolors=&apos;none&apos;, s=100)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624c157a690b2a?w=640&amp;h=480&amp;f=png&amp;s=140063" alt=""></p><ul><li><strong>隐藏坐标轴</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rw = RandomWalk()</span><br><span class="line">rw.fill_walk()</span><br><span class="line">plt.scatter(rw.x_values, rw.y_values, s=15)</span><br><span class="line">plt.axes().get_xaxis().set_visible(False)</span><br><span class="line">plt.axes().get_yaxis().set_visible(False)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624c1edd257a88?w=640&amp;h=480&amp;f=png&amp;s=43576" alt=""></p><ul><li><strong>增加点数</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rw = RandomWalk(10000)</span><br><span class="line">rw.fill_walk()</span><br><span class="line">plt.scatter(rw.x_values, rw.y_values, edgecolors=&apos;none&apos;, s=15)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624c2484020e0f?w=640&amp;h=480&amp;f=png&amp;s=96190" alt=""></p><ul><li><strong>调整尺寸以适合屏幕</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rw = RandomWalk()</span><br><span class="line">rw.fill_walk()</span><br><span class="line">plt.figure(figsize=(10, 6))</span><br><span class="line"># 1000 * 600像素</span><br><span class="line">plt.scatter(rw.x_values, rw.y_values, edgecolors=&apos;none&apos;, s=15)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624c32044b42cd?w=1000&amp;h=600&amp;f=png&amp;s=187655" alt=""></p><p><strong>matplotlib其它图形库可参考 : <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot</a></strong></p><p><strong>绘图库除了matplotlib，还有pygal、ggplot、plotly等等</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;&lt;p&gt;每次创建文件加上，避免中文乱码问题&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# -*-coding:utf-8-*-&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果还遇到中文乱码问题可在Python文件代码上右键选择File Encoding，并选择UTF-8编码格式&lt;/p&gt;
&lt;p&gt;matplotlib : &lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://matplotlib.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;matplotlib各种示例画廊，单击图标即可查看用于生成图表的代码&lt;/p&gt;
&lt;p&gt;绘制图之前注意安装matplotlib&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install matplotlib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;pip安装包加速器国内镜像，命令添加-i参数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zoukeqing.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://zoukeqing.top/tags/Python/"/>
    
      <category term="matplotlib" scheme="https://zoukeqing.top/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Python快速入门</title>
    <link href="https://zoukeqing.top/2018/09/28/python-start/"/>
    <id>https://zoukeqing.top/2018/09/28/python-start/</id>
    <published>2018-09-28T14:37:16.000Z</published>
    <updated>2018-09-29T01:48:54.881Z</updated>
    
    <content type="html"><![CDATA[<p>print(“Hello Python !”)</p><p>开始<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">first_name = &quot;zou&quot;</span><br><span class="line">last_name = &quot;keqing&quot;</span><br><span class="line">full_name = first_name + &quot; &quot; + last_name</span><br></pre></td></tr></table></figure></p><p>方法title() 来将姓名设置为合适的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 方法title() 来将姓名设置为合适的格式</span><br><span class="line">message = &quot;hello,&quot; + full_name.title() + &quot; !&quot;</span><br><span class="line">print(message)</span><br><span class="line"># 输出为hello,Zou Keqing !</span><br></pre></td></tr></table></figure><p>乘方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(3 ** 3) ** # 可表示为乘方,输出为27</span><br></pre></td></tr></table></figure><p>浮点数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(0.1 + 0.1)</span><br><span class="line">print(0.2 + 0.1)</span><br><span class="line"># 输出为</span><br><span class="line"># 0.2</span><br><span class="line"># 0.30000000000000004</span><br></pre></td></tr></table></figure><p>避免类型错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = 23</span><br><span class="line"># str()将整数用作字符串</span><br><span class="line">message = &quot;Happy &quot; + str(age) + &quot;rd birthday!&quot;</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>整数除法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(3/2)</span><br><span class="line"># Python3 输出为1.5；Python2输出为1</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;trek&apos;, &apos;cannondale&apos;, &apos;redline&apos;, &apos;specialized&apos;]</span><br><span class="line">print(bicycles)</span><br><span class="line">print(bicycles[0])</span><br><span class="line">print(bicycles[0].title())</span><br><span class="line"># 返回最后一个元素</span><br><span class="line">print(bicycles[-1].title())</span><br></pre></td></tr></table></figure><h2 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h2><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [&apos;honda&apos;, &apos;yamaha&apos;, &apos;suzuki&apos;]</span><br><span class="line">motorcycles[0] = &apos;ducati&apos;</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles.append(&quot;ducati&quot;)</span><br><span class="line">print(motorcycles)</span><br><span class="line">motorcycles.insert(0,&quot;ducati&quot;)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>del 语句删除元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del motorcycles[0]</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><p>pop()方法删除列表末尾的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">motorcycles.pop()</span><br></pre></td></tr></table></figure><p>添加参数index删除指定的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">motorcycles.pop(0)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><p>根据值删除元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">motorcycles.remove(&quot;yamaha&quot;)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><p>sort() 对列表进行永久性排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [&apos;bmw&apos;, &apos;audi&apos;, &apos;toyota&apos;, &apos;subaru&apos;]</span><br><span class="line">cars.sort()</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><p>按与字母顺序相反的顺序排列列表元素，为此，只需向sort() 方法传递参数reverse=True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars.sort(reverse=True)</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><p>函数sorted() 对列表进行临时排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sorted(cars))</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><p>reverse()反转列表元素的排列顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars.reverse()</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><p>确定列表的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(cars))</span><br></pre></td></tr></table></figure><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><p>for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [&apos;alice&apos;, &apos;david&apos;, &apos;carolina&apos;]</span><br><span class="line">for magician in magicians:</span><br><span class="line">    print(magician.title() + &quot; !&quot;)</span><br></pre></td></tr></table></figure><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><p>函数range()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for value in range(1,6):</span><br><span class="line">    print(value)</span><br><span class="line">print(range(1,6))</span><br></pre></td></tr></table></figure><h3 id="使用range-创建数字列表"><a href="#使用range-创建数字列表" class="headerlink" title="使用range()创建数字列表"></a>使用range()创建数字列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(1,6))</span><br><span class="line">print(numbers)</span><br><span class="line">print(list(range(0,11,2)))</span><br></pre></td></tr></table></figure><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print([value **2 for value in range(1,11)])</span><br></pre></td></tr></table></figure><p>指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值;</p><p>接下来，编写一个for 循环，用于给表达式提供值，再加上右方括号</p><h2 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h2><p>切片 处理列表的部分元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">players = [&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;]</span><br><span class="line">print(players[0:3])</span><br><span class="line">print(players[:4])</span><br><span class="line">print(players[2:])</span><br><span class="line">print(players[-3:])</span><br></pre></td></tr></table></figure><p>遍历切片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for player in players[:4]:</span><br><span class="line">    print(player.title())</span><br></pre></td></tr></table></figure><p>复制列表，而不是简单的赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">other_players = players[:]</span><br><span class="line">print(other_players)</span><br><span class="line">other_players.append(&quot;other&quot;)</span><br><span class="line">print(players)</span><br><span class="line">print(other_players)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;]</span><br><span class="line">[&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;]</span><br><span class="line">[&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;, &apos;other&apos;]</span><br></pre></td></tr></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>列表非常适合用于存储在程序运行期间可能变化的数据集。</p><p>列表是可以修改的，这对处理网站的用户列表或游戏中的角色列表至关重要。</p><p>然而，有时候你需要创建一系列不可修改的元素，元组可以满足这种需求</p><p>元组看起来犹如列表，但使用圆括号而不是方括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (200, 50)</span><br><span class="line">print(str(dimensions[0]) + &quot;,&quot; + str(dimensions[1]))</span><br></pre></td></tr></table></figure><p>遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for dimension in dimensions:</span><br><span class="line">    print(dimension)</span><br></pre></td></tr></table></figure><p>修改元组变量</p><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (528)</span><br><span class="line">print(dimensions)</span><br></pre></td></tr></table></figure><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>一个简单的示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [&apos;audi&apos;, &apos;bmw&apos;, &apos;subaru&apos;, &apos;toyota&apos;]</span><br><span class="line">for car in cars:</span><br><span class="line">    if car == &apos;bmw&apos;:</span><br><span class="line">        print(car.upper())</span><br><span class="line">    else:</span><br><span class="line">        print(car.title())</span><br></pre></td></tr></table></figure><p>检查是否相等时不考虑大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">car = &apos;Audi&apos;</span><br><span class="line">print(car == &apos;audi&apos;)</span><br><span class="line">print(car.lower() == &apos;audi&apos;)</span><br></pre></td></tr></table></figure><h3 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h3><p>使用and检查多个条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = 18</span><br><span class="line">print(age &gt;= 18 and age &lt;= 22)</span><br></pre></td></tr></table></figure><p>使用or检查多个条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(age &lt;= 16 or age &gt;= 18)</span><br></pre></td></tr></table></figure><p>检查特定值是否包含在列表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if 8 in range(5,9):</span><br><span class="line">    print(8 in range(5,9))</span><br><span class="line">    print(&quot;存在&quot;)</span><br><span class="line">if 8 not in range(1,7):</span><br><span class="line">    print(8 not in range(1,7))</span><br><span class="line">    print(&quot;不存在&quot;)</span><br></pre></td></tr></table></figure><h2 id="if-elif-else-结构"><a href="#if-elif-else-结构" class="headerlink" title="if-elif-else 结构"></a>if-elif-else 结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &lt; 5:</span><br><span class="line">    print(&quot;age &lt; 5&quot;)</span><br><span class="line">elif age &lt; 18:</span><br><span class="line">    print(&quot;5 &lt;= age &lt; 18&quot;)</span><br><span class="line">elif age &lt; 25:</span><br><span class="line">    print(&quot;18 &lt;= age &lt; 25&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;age &gt;= 25&quot;)</span><br></pre></td></tr></table></figure><p>如果列表为空可返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">car = []</span><br><span class="line">if car:</span><br><span class="line">    print(&quot;car 不为空&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;car 为空&quot;)</span><br></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p><strong>一个简单的字典</strong></p><p>创建一个空字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0 = &#123;&apos;color&apos;: &apos;green&apos;, &apos;points&apos;: 5&#125;</span><br></pre></td></tr></table></figure><p>访问字典中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(alien_0[&apos;color&apos;])</span><br><span class="line">print(alien_0[&apos;points&apos;])</span><br></pre></td></tr></table></figure><p>添加键值对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0[&apos;x_position&apos;] = 0</span><br><span class="line">alien_0[&apos;y_position&apos;] = 25</span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure><p>修改字典中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0[&apos;color&apos;] = &apos;yellow&apos;</span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure><p>删除键值对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del alien_0[&apos;y_position&apos;]</span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure><p>遍历字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for key,value in alien_0.items():</span><br><span class="line">    print(&quot;\nKey: &quot; + key)</span><br><span class="line">    print(&quot;Value: &quot; + str(value))</span><br></pre></td></tr></table></figure><p>遍历字典中的所有键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for name in alien_0.keys():</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p><strong>for name in alien_0 也默认为 for name in alien_0.keys()</strong></p><p>按顺序遍历字典中的所有键</p><p>使用函数sorted() 来获得按特定顺序排列的键列表的副本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for name in sorted(alien_0.keys()):</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p>当然也可以省略.keys()，如for name in sorted(alien_0):</p><p>遍历字典中的所有值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">values = []</span><br><span class="line">for value in alien_0.values():</span><br><span class="line">    print(value)</span><br><span class="line">    values.append(str(value))</span><br><span class="line">print(values)</span><br></pre></td></tr></table></figure><p>这种做法提取字典中所有的值，而没有考虑是否重复。</p><p>涉及的值很少时，这也许不是问题，但如果被调查者很多，最终的列表可能包含大量的重复项。</p><p>为剔除重复项，可使用集合（set）。集合 类似于列表，但每个元素都必须是独一无二的</p><p>通过对包含重复元素的列表调用set()，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">values = []</span><br><span class="line">values_1 = []</span><br><span class="line">for value in set(alien_0.values()):</span><br><span class="line">    values.append(str(value))</span><br><span class="line">    values_1.append(value)</span><br><span class="line">print(values)</span><br><span class="line">print(values_1)</span><br></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套</p><p><strong>示例</strong></p><p>创建一个用于存储外星人的空列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aliens = []</span><br></pre></td></tr></table></figure><p>创建30个外星人</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for alien_number in range(30):</span><br><span class="line">    new_alien = &#123;&apos;id&apos;:alien_number,&apos;color&apos;:&apos;yellow&apos;,&apos;points&apos;:5&#125;</span><br><span class="line">    aliens.append(new_alien)</span><br><span class="line">print(aliens[:5])</span><br></pre></td></tr></table></figure><h2 id="用户输入和while-循环"><a href="#用户输入和while-循环" class="headerlink" title="用户输入和while 循环"></a>用户输入和while 循环</h2><p>你使用函数input() 时，都应指定清晰而易于明白的提示，准确地指出你希望用户提供什么样的信息指出用户该输入任何信息的提示都行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = input(&quot;Please enter your name: &quot;)</span><br><span class="line">print(&quot;\nHello, &quot; + name + &quot;!&quot;)</span><br></pre></td></tr></table></figure><p>使用int() 来获取数值输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = input(&quot;How old are you?&quot;)</span><br><span class="line">age = int(age)</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><p>让用户选择何时退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prompt = &quot;\nTell me something, and I will repeat it back to you:&quot;</span><br><span class="line">prompt += &quot;\nEnter &apos;quit&apos; to end the program. &quot;</span><br><span class="line">message = &quot;&quot;</span><br><span class="line">while message != &apos;quit&apos;:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    print(message)</span><br></pre></td></tr></table></figure><p>使用break退出循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt = &quot;\nPlease enter the name of a city you have visited:&quot;</span><br><span class="line">prompt += &quot;\n(Enter &apos;quit&apos; when you are finished.) &quot;</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    city = input(prompt)</span><br><span class="line">    if city == &apos;quit&apos;:</span><br><span class="line">        break</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;I&apos;d love to go to &quot; + city.title() + &quot;!&quot;)</span><br></pre></td></tr></table></figure><p>在循环中使用continue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">current_number = 0</span><br><span class="line">while current_number &lt; 10:</span><br><span class="line">    current_number += 1</span><br><span class="line">    if current_number % 2 == 0:</span><br><span class="line">        continue</span><br><span class="line">    print(current_number)</span><br></pre></td></tr></table></figure><p>使用while循环处理列表和字典</p><p>在列表之间移动元素</p><p>首先，创建一个待验证用户列表和一个用于存储已验证用户的空列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [&apos;alice&apos;, &apos;brian&apos;, &apos;candace&apos;]</span><br><span class="line">confirmed_users = []</span><br></pre></td></tr></table></figure><p>验证每个用户，直到没有未验证用户为止</p><p>将每个经过验证的列表都移到已验证用户列表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(&quot;Verifying user: &quot; + current_user.title())</span><br><span class="line">    confirmed_users.append(current_user)</span><br></pre></td></tr></table></figure><p>显示所有已验证的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;\nThe following users have been confirmed:&quot;)</span><br><span class="line">for confirmed_user in confirmed_users:</span><br><span class="line">    print(confirmed_user.title())</span><br></pre></td></tr></table></figure><p>删除包含特定值的所有列表元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pets = [&apos;dog&apos;, &apos;cat&apos;, &apos;dog&apos;, &apos;goldfish&apos;, &apos;cat&apos;, &apos;rabbit&apos;, &apos;cat&apos;]</span><br><span class="line">print(pets)</span><br><span class="line">while &apos;cat&apos; in pets:</span><br><span class="line">    pets.remove(&apos;cat&apos;)</span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><p>使用用户输入来填充字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">responses = &#123;&#125;</span><br></pre></td></tr></table></figure><p>设置一个标志，指出调查是否继续</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">polling_active = True</span><br><span class="line">while polling_active:</span><br><span class="line">    # 提示输入被调查者的名字和回答</span><br><span class="line">    name = input(&quot;\nWhat is your name? &quot;)</span><br><span class="line">    response = input(&quot;Which mountain would you like to climb someday? &quot;)</span><br><span class="line">    # 将答卷存储在字典中</span><br><span class="line">    responses[name] = response</span><br><span class="line">    # 看看是否还有人要参与调查</span><br><span class="line">    repeat = input(&quot;Would you like to let another person respond? (yes/ no) &quot;)</span><br><span class="line">    if repeat == &apos;no&apos;:</span><br><span class="line">        polling_active = False</span><br><span class="line"># 调查结束，显示结果</span><br><span class="line">print(&quot;\n--- Poll Results ---&quot;)</span><br><span class="line">for name, response in responses.items():</span><br><span class="line">    print(name + &quot; would like to climb &quot; + response + &quot;.&quot;)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def greet_user():</span><br><span class="line">    print(&quot;Hello!&quot;)</span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure><p>传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def greet_user(username):</span><br><span class="line">    print(&quot;Hello,&quot; + username.title() + &quot;!&quot;)</span><br><span class="line">greet_user(&quot;python&quot;)</span><br></pre></td></tr></table></figure><p>关键字实参</p><p>关键字实参是传递给函数的名称—值对</p><p>关键字实参无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def greet_user(username,age):</span><br><span class="line">    print(&quot;Hello,&quot;+username.title())</span><br><span class="line">    print(&quot;And age is &quot; + str(age))</span><br><span class="line">greet_user(age=20,username=&apos;zoukeqing&apos;)</span><br></pre></td></tr></table></figure><p>默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def greet_user(username,age = 20):</span><br><span class="line">    print(&quot;Hello,&quot;+username.title())</span><br><span class="line">    print(&quot;And age is &quot; + str(age))</span><br><span class="line">greet_user(username=&apos;zoukeqing&apos;)</span><br><span class="line">greet_user(&apos;zoukeqing&apos;)</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回简单值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_formatted_name(first_name,last_name):</span><br><span class="line">    full_name = first_name + &quot; &quot; + last_name</span><br><span class="line">    return full_name.title()</span><br><span class="line">print(get_formatted_name(&apos;zou&apos;,&apos;keqing&apos;))</span><br></pre></td></tr></table></figure><p>让实参变成可选的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def get_formatted_name(first_name = &apos;&apos;,middle_name = &apos;&apos;,last_name = &apos;&apos;):</span><br><span class="line">    if first_name and middle_name:</span><br><span class="line">        full_name = first_name + &apos; &apos; + middle_name + &apos; &apos; + last_name + &apos;1&apos;</span><br><span class="line">    elif middle_name:</span><br><span class="line">        full_name = middle_name + &apos; &apos; + last_name + &apos;2&apos;</span><br><span class="line">    else:</span><br><span class="line">        full_name = last_name + &apos;3&apos;</span><br><span class="line">    return full_name</span><br><span class="line">print(get_formatted_name(&apos;zou&apos;,&apos;ke&apos;,&apos;qing&apos;))</span><br><span class="line">print(get_formatted_name(middle_name=&apos;ke&apos;,last_name=&apos;qing&apos;))</span><br><span class="line">print(get_formatted_name(last_name=&apos;keqing&apos;))</span><br></pre></td></tr></table></figure><p>返回字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def build_person(first_name,last_name,age = &apos;&apos;):</span><br><span class="line">    person = &#123;&apos;first&apos;:first_name,&apos;last&apos;:last_name&#125;</span><br><span class="line">    if age:</span><br><span class="line">        person[&apos;age&apos;] = age</span><br><span class="line">    return person</span><br><span class="line">print(build_person(&apos;zou&apos;,&apos;keqing&apos;))</span><br><span class="line">print(build_person(&apos;zou&apos;,&apos;keqing&apos;,20))</span><br></pre></td></tr></table></figure><p>传递列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def greet_users(names):</span><br><span class="line">    for name in names:</span><br><span class="line">        message = &quot;Hello,&quot; + name.title() + &quot;!&quot;</span><br><span class="line">        print(message)</span><br><span class="line">usernames = [&apos;kkk&apos;,&apos;Kevin&apos;,&apos;zoukeqing&apos;]</span><br><span class="line">greet_users(usernames)</span><br></pre></td></tr></table></figure><h2 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h2><p>向函数传递列表的原件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def greet_users(names):</span><br></pre></td></tr></table></figure><p>禁止函数修改列表</p><p>向函数传递列表的副本而不是原件，这样函数所作的修改都只影响副本，丝毫不影响原件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def greet_users(names[:]):</span><br></pre></td></tr></table></figure><p>传递任意数量的实参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def make_pizza(*toppings):</span><br><span class="line">    print(toppings)</span><br><span class="line">    for topping in toppings:</span><br><span class="line">        print(&quot;- &quot; + topping)</span><br><span class="line">make_pizza(&apos;pepperoni&apos;)</span><br><span class="line">make_pizza(&apos;mushrooms&apos;, &apos;green peppers&apos;, &apos;extra cheese&apos;)</span><br></pre></td></tr></table></figure><p>形参名*toppings 中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中。</p><p>一个星号* 创建空元组</p><p>两个星号** 创建空字典</p><p>使用任意数量的关键字实参</p><p>在下面的示例中，函数build_profile() 接受名和姓，同时还接受任意数量的关键字实参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def build_profile(first,last,**user_info):</span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[&apos;first_name&apos;] = first</span><br><span class="line">    profile[&apos;last_name&apos;] = last</span><br><span class="line">    for key,value in user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    return profile</span><br><span class="line">user_profile = build_profile(&apos;zou&apos;,&apos;keqing&apos;,location = &apos;Gexianshan&apos;,age = 20)</span><br><span class="line">print(user_profile)</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h2><p>模拟小狗的简单尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Dog():</span><br><span class="line">    # 创建一个实例，并初始化属性</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.color = &apos;yellow&apos;</span><br><span class="line">    def get_description(self):</span><br><span class="line">        &quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span><br><span class="line">        long_name = self.name.title() + &apos; &apos; + str(self.age) + &apos; &apos; + self.color</span><br><span class="line">        return long_name</span><br><span class="line">    self 指向实例本身的引用，让实例能够访问类中的属性和方法</span><br><span class="line">    def sit(self):</span><br><span class="line">        &quot;&quot;&quot;蹲下&quot;&quot;&quot;</span><br><span class="line">        print(self.name.title() + &quot; is now sitting.&quot;)</span><br><span class="line">    def roll_over(self):</span><br><span class="line">        &quot;&quot;&quot;打滚&quot;&quot;&quot;</span><br><span class="line">        print(self.name.title() + &quot; rolled over!&quot;)</span><br><span class="line">    def read_color(self):</span><br><span class="line">        &quot;&quot;&quot;查看小狗的颜色信息&quot;&quot;&quot;</span><br><span class="line">        print(self.color)</span><br><span class="line">    def update_color(self,color):</span><br><span class="line">        &quot;&quot;&quot;通过方法修改属性的值&quot;&quot;&quot;</span><br><span class="line">        self.color = color</span><br></pre></td></tr></table></figure><p>根据类创建实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(&quot;willie&quot;,6)</span><br></pre></td></tr></table></figure><p>访问属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(my_dog.name)</span><br></pre></td></tr></table></figure><p>调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_dog.sit()</span><br></pre></td></tr></table></figure><p>创建多个实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_dog = Dog(&apos;lucy&apos;,3)</span><br><span class="line">print(your_dog.name)</span><br><span class="line">your_dog.sit()</span><br></pre></td></tr></table></figure><p>通过方法读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_dog.read_color()</span><br></pre></td></tr></table></figure><p>直接修改属性的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dog.color = &apos;white&apos;</span><br><span class="line">my_dog.read_color()</span><br></pre></td></tr></table></figure><p>通过方法修改属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dog.update_color(&apos;golden&apos;)</span><br><span class="line">my_dog.read_color()</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>子类继承其父类的所有属性和方法，同时还可以定义自己的属性和方法</p><p>子类的方法<strong>init</strong>()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    &quot;&quot;&quot;模拟汽车的简单尝试&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = 0</span><br><span class="line"></span><br><span class="line">    def get_descriptive_name(self):</span><br><span class="line">        long_name = str(self.year) + &apos; &apos; + self.make + &apos; &apos; + self.model</span><br><span class="line">        return long_name.title()</span><br><span class="line"></span><br><span class="line">    def read_odometer(self):</span><br><span class="line">        print(&quot;This car has &quot; + str(self.odometer_reading) + &quot; miles on it.&quot;)</span><br><span class="line"></span><br><span class="line">    def update_odometer(self, mileage):</span><br><span class="line">        if mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;You can&apos;t roll back an odometer!&quot;)</span><br><span class="line"></span><br><span class="line">    def increment_odometer(self, miles):</span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Battery:</span><br><span class="line">    &quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span><br><span class="line">    def __init__(self,battery_size=70):</span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    def describe_battery(self):</span><br><span class="line">        &quot;&quot;&quot;打印一条电瓶容量的消息&quot;&quot;&quot;</span><br><span class="line">        print(&quot;This car has a &quot; + str(self.battery_size) + &quot;-kWh battery.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ElectricCar(Car):</span><br><span class="line">    &quot;&quot;&quot;电动车的独特之处&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        # 将实例用作属性</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(&apos;tesla&apos;, &apos;model s&apos;, 2018)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery()</span><br></pre></td></tr></table></figure><h2 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h2><p>假设在另外一个文件导入整个模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import hello</span><br><span class="line">my_tesla = hello.ElectricCar(&apos;tesla&apos;, &apos;model s&apos;, 2018)</span><br></pre></td></tr></table></figure><p>导入单个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from hello import ElectricCar</span><br></pre></td></tr></table></figure><p>导入多个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from hello import Car,ElectricCar</span><br></pre></td></tr></table></figure><h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h1><p>新建一个pi_digits.txt文件，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure><p>读取文件代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;pi_digits.txt&apos;) as file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure><p><strong>说明：</strong> / 斜杠 和 \ 反斜杠 的使用是在于文件路径在Linux和OS X中用斜杠而Windows系统中用反斜杠</p><p>逐行读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;pi_digits.txt&apos;) as file_object:</span><br><span class="line">    for line in file_object:</span><br><span class="line">        print(line)</span><br><span class="line">        去除每行末尾的换行符</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure><p>创建一个包含文件各行内容的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;pi_digits.txt&apos;) as file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">for line in lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>写入空文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;program.txt&apos;, &apos;w&apos;) as file_object:</span><br><span class="line">    file_object.write(&quot;I love programing.&quot;)</span><br></pre></td></tr></table></figure><p>缺省值默认只读模式打开文件</p><p><strong>读取模式 r;写入模式 w;附加模式 a;读取和写入模式 r+</strong></p><p>如果你要写入的文件不存在，函数open() 将自动创建它。</p><p>然而，以写入（’w’ ）模式打开文件时千万要小心，因为如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p><p>写入多行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;program.txt&apos;, &apos;w&apos;) as file_object:</span><br><span class="line">    file_object.write(&quot;I love programing.&quot;)</span><br><span class="line">    file_object.write(&quot;I love creating new game.&quot;)</span><br><span class="line">    file_object.write(&quot;\nI love programing.&quot;)</span><br></pre></td></tr></table></figure><p>附加到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;program.txt&apos;, &apos;a&apos;) as file_object:</span><br><span class="line">    file_object.write(&quot;\n附加到文件&quot;)</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>try-except代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(5/0)</span><br><span class="line">try:</span><br><span class="line">    print(5/0)</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&quot;You can&apos;t divide by zero!&quot;)</span><br></pre></td></tr></table></figure><p>使用异常避免崩溃</p><p>通过将可能引发错误的代码放在try-except 代码块中，可提高这个程序抵御错误的能力</p><p>这个示例还包含一个else 代码块；依赖于try 代码块成功执行的代码都应放到else 代码块中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Give me two numbers, and I&apos;ll divide them.&quot;)</span><br><span class="line">print(&quot;Enter &apos;q&apos; to quit.&quot;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    first_number = input(&quot;\nFirst number: &quot;)</span><br><span class="line">    if first_number == &apos;q&apos;:</span><br><span class="line">        break</span><br><span class="line">    second_number = input(&quot;Second number: &quot;)</span><br><span class="line">    try:</span><br><span class="line">        answer = int(first_number) / int(second_number)</span><br><span class="line">    except ZeroDivisionError:</span><br><span class="line">        print(&quot;You can&apos;t divide by 0!&quot;)</span><br><span class="line">    else:print(answer)</span><br></pre></td></tr></table></figure><p>处理FileNotFoundError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filename = &apos;example.txt&apos;</span><br><span class="line">try:</span><br><span class="line">    with open(filename) as file_object:</span><br><span class="line">        contents = file_object.read()</span><br><span class="line">        print(contents)</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    message = &quot;Sorry,the file &quot; + filename + &quot; does not exist.&quot;</span><br><span class="line">    print(message)</span><br></pre></td></tr></table></figure><p>分析文本</p><p>split() 根据一个字符串创建一个单词列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title = &apos;Alice in Wonderland&apos;</span><br><span class="line">print(title.split())</span><br></pre></td></tr></table></figure><p>使用多个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def count_words(filename):</span><br><span class="line">    try:</span><br><span class="line">        with open(filename) as file_object:</span><br><span class="line">            contents = file_object.read()</span><br><span class="line">    except FileNotFoundError:</span><br><span class="line">        # pass语句使发生异常时什么都不做</span><br><span class="line">        pass</span><br><span class="line">        print(&quot;Sorry,the file &quot; + filename + &quot; does not exist.&quot;)</span><br><span class="line">    else:</span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = len(words)</span><br><span class="line">        print(&quot;The file &quot; + filename + &quot; has about &quot; + str(num_words) + &quot; words.&quot;)</span><br><span class="line"></span><br><span class="line">filename = &apos;program.txt&apos;</span><br><span class="line">count_words(filename)</span><br><span class="line"># 文件example.txt不存在，但这丝毫不影响这个程序处理其它文件</span><br><span class="line">filenames = [&apos;pi_digits.txt&apos;, &apos;example.ext&apos;, &apos;program.txt&apos;]</span><br><span class="line">for filename in filenames:</span><br><span class="line">    count_words(filename)</span><br></pre></td></tr></table></figure><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>先导入json整个模块：import json</p><p>json.dump() 接受两个参数：要存储的数据以及可用于存储数据的文件对象</p><p>json.load() 返回数据，接受一个参数：存储数据的文件对象</p><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><p>hello.py文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_formatted_name(first, last):</span><br><span class="line">    full_name = first + &apos; &apos; + last</span><br><span class="line">    return full_name</span><br></pre></td></tr></table></figure></p><p>新建另一个测试文件，导入unittest模块，代码格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from hello import get_formatted_name</span><br><span class="line"></span><br><span class="line">class NamesTestCase(unittest.TestCase):</span><br><span class="line">    # 测试函数</span><br><span class="line">    # 创建一个类，继承unittest.TestCase</span><br><span class="line">    def test_first_last_name(self):</span><br><span class="line">        # 必须以test开头</span><br><span class="line">        formatted_name = get_formatted_name(&apos;Zou&apos;, &apos;Keqing&apos;)</span><br><span class="line">        self.assertEqual(formatted_name, &apos;Zou Keqing&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure></p><p>各种断言方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>assertEqual(a,b)</td><td>a == b</td></tr><tr><td>assertNotEqual(a,b)</td><td>a != b</td></tr><tr><td>assertTrue(x)</td><td>x 为 True</td></tr><tr><td>assertFalse(x)</td><td>x 为 False</td></tr><tr><td>assertIn(item,list)</td><td>item 在 list 中</td></tr><tr><td>assertNotIn(item,list)</td><td>item 不在 list 中</td></tr></tbody></table><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><p>hello.py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class AddName:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.names = []</span><br><span class="line"></span><br><span class="line">    def store_name(self, new_name):</span><br><span class="line">        self.names.append(new_name)</span><br><span class="line"></span><br><span class="line">    def show_names(self):</span><br><span class="line">        print(self.names)</span><br></pre></td></tr></table></figure><p>同样在另一个测试文件，导入unittest模块，代码格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from hello import AddName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestAddName(unittest.TestCase):</span><br><span class="line">    def test_store_single_name(self):</span><br><span class="line">        add_name = AddName()</span><br><span class="line">        add_name.store_name(&apos;kkk&apos;)</span><br><span class="line">        self.assertIn(&apos;kkk&apos;, add_name.names)</span><br><span class="line"></span><br><span class="line">    def test_store_three_names(self):</span><br><span class="line">        add_name = AddName()</span><br><span class="line">        add_name.store_name(&apos;zou&apos;)</span><br><span class="line">        add_name.store_name(&apos;yu&apos;)</span><br><span class="line">        add_name.store_name(&apos;huang&apos;)</span><br><span class="line">        names = [&apos;zou&apos;, &apos;yu&apos;, &apos;huang&apos;]</span><br><span class="line">        for name in names:</span><br><span class="line">            self.assertIn(name, add_name.names)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><h2 id="setUp-方法"><a href="#setUp-方法" class="headerlink" title="setUp() 方法"></a>setUp() 方法</h2><p>只需创建对象一次，并在每个测试方法中使用它们<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from hello import AddName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestAddName(unittest.TestCase):</span><br><span class="line">    def setUp(self):</span><br><span class="line">        self.add_name = AddName()</span><br><span class="line">        self.add_name.store_name(&apos;kkk&apos;)</span><br><span class="line">        self.add_name.store_name(&apos;zou&apos;)</span><br><span class="line">        self.add_name.store_name(&apos;yu&apos;)</span><br><span class="line">        self.add_name.store_name(&apos;huang&apos;)</span><br><span class="line">        name_1 = &apos;ooo&apos;</span><br><span class="line">        self.add_name.store_name(name_1)</span><br><span class="line"></span><br><span class="line">    def test_store_single_name(self):</span><br><span class="line">        self.assertIn(&apos;kkk&apos;, self.add_name.names)</span><br><span class="line"></span><br><span class="line">    def test_store_three_names(self):</span><br><span class="line">        names = [&apos;zou&apos;, &apos;yu&apos;, &apos;huang&apos;]</span><br><span class="line">        for name in names:</span><br><span class="line">            self.assertIn(name, self.add_name.names)</span><br><span class="line">        print(self.add_name.names)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;print(“Hello Python !”)&lt;/p&gt;
&lt;p&gt;开始&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;first_name = &amp;quot;zou&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;last_name = &amp;quot;keqing&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;full_name = first_name + &amp;quot; &amp;quot; + last_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方法title() 来将姓名设置为合适的格式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 方法title() 来将姓名设置为合适的格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;message = &amp;quot;hello,&amp;quot; + full_name.title() + &amp;quot; !&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 输出为hello,Zou Keqing !&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;乘方&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(3 ** 3) ** # 可表示为乘方,输出为27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;浮点数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(0.1 + 0.1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(0.2 + 0.1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 输出为&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 0.30000000000000004&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;避免类型错误&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;age = 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# str()将整数用作字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;message = &amp;quot;Happy &amp;quot; + str(age) + &amp;quot;rd birthday!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(message)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;整数除法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(3/2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Python3 输出为1.5；Python2输出为1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zoukeqing.top/categories/Python/"/>
    
    
      <category term="Python" scheme="https://zoukeqing.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>R语言快速入门</title>
    <link href="https://zoukeqing.top/2018/09/18/r-start/"/>
    <id>https://zoukeqing.top/2018/09/18/r-start/</id>
    <published>2018-09-18T02:55:15.000Z</published>
    <updated>2018-09-18T04:16:28.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="START"><a href="#START" class="headerlink" title="START"></a>START</h1><h2 id="为什么要使用R？"><a href="#为什么要使用R？" class="headerlink" title="为什么要使用R？"></a>为什么要使用R？</h2><blockquote><p>多数商业统计软件价格不菲，投入成千上万美元都是可能的。而R是免费的！</p><p>R拥有顶尖水准的制图功能。如果希望复杂数据可视化，那么R拥有最全面且最强大的一<br>系列可用功能。</p><p>R是一个可进行交互式数据分析和探索的强大平台。</p><p>R是一个无与伦比的平台，在其上可使用一种简单而直接的方式编写新的统计方法。它易<br>于扩展，并为快速编程实现新方法提供了一套十分自然的语言。</p><p>R可运行于多种平台之上，包括Windows、UNIX和Mac OS X。这基本上意味着它可以运<br>行于你所能拥有的任何计算机上。</p></blockquote><p>下面展示R制图功能的一个示例</p><p><img src="https://s1.ax1x.com/2018/09/18/iZXSG8.png" alt=""></p><a id="more"></a><h2 id="R的获取与安装"><a href="#R的获取与安装" class="headerlink" title="R的获取与安装"></a>R的获取与安装</h2><blockquote><p>R可以在CRAN（Comprehensive R Archive Network）<a href="http://cran.r-project.org" target="_blank" rel="noopener">http://cran.r-project.org</a> 上免费下载。Linux、<br>Mac OS X和Windows都有相应编译好的二进制版本。根据你所选择平台的安装说明进行安装即<br>可。稍</p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><p>向量适用于存储数值型、字符型或逻辑型数据的一维数组</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">b &lt;- c(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>)</span><br><span class="line">c &lt;- c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">cat(a,b,c)</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> one two three <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><p>这里，a是数值型向量，b是字符型向量，而c是逻辑型向量。①注意，单个向量中的数据必须拥有相同的类型或模式（数值型、字符型或逻辑型）。同一向量中无法混杂不同模式的数据。</p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>矩阵是一个二维数组，只是每个元素都拥有相同的模式（数值型、字符型或逻辑性），可通过函数matrix创建矩阵</p><p><strong>查看帮助</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; help(<span class="string">"matrix"</span>)</span><br></pre></td></tr></table></figure><p>得到关于 <code>matrix</code> 的 <code>R Documentation</code> ，看下说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">matrix &#123;base&#125;R Documentation</span><br><span class="line">Matrices</span><br><span class="line"></span><br><span class="line">Description</span><br><span class="line"></span><br><span class="line">matrix creates a matrix from the given set of values.</span><br><span class="line"></span><br><span class="line">as.matrix attempts to turn its argument into a matrix.</span><br><span class="line"></span><br><span class="line">is.matrix tests if its argument is a (strict) matrix.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line"></span><br><span class="line">matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,</span><br><span class="line">       dimnames = NULL)</span><br><span class="line"></span><br><span class="line">as.matrix(x, ...)</span><br><span class="line">## S3 method for class &apos;data.frame&apos;</span><br><span class="line">as.matrix(x, rownames.force = NA, ...)</span><br><span class="line"></span><br><span class="line">is.matrix(x)</span><br><span class="line">Arguments</span><br><span class="line"></span><br><span class="line">data</span><br><span class="line">an optional data vector (including a list or expression vector). Non-atomic classed R objects are coerced by as.vector and all attributes discarded.</span><br><span class="line">nrow</span><br><span class="line">the desired number of rows.</span><br><span class="line">ncol</span><br><span class="line">the desired number of columns.</span><br><span class="line">byrow</span><br><span class="line">logical. If FALSE (the default) the matrix is filled by columns, otherwise the matrix is filled by rows.</span><br><span class="line">dimnames</span><br><span class="line">A dimnames attribute for the matrix: NULL or a list of length 2 giving the row and column names respectively. An empty list is treated as NULL, and a list of length one as row names. The list can be named, and the list names will be used as names for the dimensions.</span><br><span class="line">x</span><br><span class="line">an R object.</span><br><span class="line">...</span><br><span class="line">additional arguments to be passed to or from methods.</span><br><span class="line">rownames.force</span><br><span class="line">logical indicating if the resulting matrix should have character (rather than NULL) rownames. The default, NA, uses NULL rownames if the data frame has ‘automatic’ row.names or for a zero-row data frame.</span><br><span class="line">Details</span><br><span class="line"></span><br><span class="line">If one of nrow or ncol is not given, an attempt is made to infer it from the length of data and the other parameter. If neither is given, a one-column matrix is returned.</span><br><span class="line"></span><br><span class="line">If there are too few elements in data to fill the matrix, then the elements in data are recycled. If data has length zero, NA of an appropriate type is used for atomic vectors (0 for raw vectors) and NULL for lists.</span><br><span class="line"></span><br><span class="line">is.matrix returns TRUE if x is a vector and has a &quot;dim&quot; attribute of length 2 and FALSE otherwise. Note that a data.frame is not a matrix by this test. The function is generic: you can write methods to handle specific classes of objects, see InternalMethods.</span><br><span class="line"></span><br><span class="line">as.matrix is a generic function. The method for data frames will return a character matrix if there is only atomic columns and any non-(numeric/logical/complex) column, applying as.vector to factors and format to other non-character columns. Otherwise, the usual coercion hierarchy (logical &lt; integer &lt; double &lt; complex) will be used, e.g., all-logical data frames will be coerced to a logical matrix, mixed logical-integer will give a integer matrix, etc.</span><br><span class="line"></span><br><span class="line">The default method for as.matrix calls as.vector(x), and hence e.g. coerces factors to character vectors.</span><br><span class="line"></span><br><span class="line">When coercing a vector, it produces a one-column matrix, and promotes the names (if any) of the vector to the rownames of the matrix.</span><br><span class="line"></span><br><span class="line">is.matrix is a primitive function.</span><br><span class="line"></span><br><span class="line">The print method for a matrix gives a rectangular layout with dimnames or indices. For a list matrix, the entries of length not one are printed in the form integer,7 indicating the type and length.</span><br><span class="line"></span><br><span class="line">Note</span><br><span class="line"></span><br><span class="line">If you just want to convert a vector to a matrix, something like</span><br><span class="line"></span><br><span class="line">  dim(x) &lt;- c(nx, ny)</span><br><span class="line">  dimnames(x) &lt;- list(row_names, col_names)</span><br><span class="line">will avoid duplicating x.</span><br><span class="line"></span><br><span class="line">References</span><br><span class="line"></span><br><span class="line">Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth &amp; Brooks/Cole.</span><br><span class="line"></span><br><span class="line">See Also</span><br><span class="line"></span><br><span class="line">data.matrix, which attempts to convert to a numeric matrix.</span><br><span class="line"></span><br><span class="line">A matrix is the special case of a two-dimensional array.</span><br><span class="line"></span><br><span class="line">Examples</span><br><span class="line"></span><br><span class="line">is.matrix(as.matrix(1:10))</span><br><span class="line">!is.matrix(warpbreaks)  # data.frame, NOT matrix!</span><br><span class="line">warpbreaks[1:10,]</span><br><span class="line">as.matrix(warpbreaks[1:10,])  # using as.matrix.data.frame(.) method</span><br><span class="line"></span><br><span class="line">## Example of setting row and column names</span><br><span class="line">mdat &lt;- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,</span><br><span class="line">               dimnames = list(c(&quot;row1&quot;, &quot;row2&quot;),</span><br><span class="line">                               c(&quot;C.1&quot;, &quot;C.2&quot;, &quot;C.3&quot;)))</span><br><span class="line">mdat</span><br></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; mdat &lt;- matrix(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>,</span><br><span class="line">+                dimnames = list(c(<span class="string">"row1"</span>, <span class="string">"row2"</span>),</span><br><span class="line">+                                c(<span class="string">"C.1"</span>, <span class="string">"C.2"</span>, <span class="string">"C.3"</span>)))</span><br><span class="line">&gt; mdat</span><br><span class="line">     C.1 C.2 C.3</span><br><span class="line">row1   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">row2  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span></span><br><span class="line">&gt; print(mdat)</span><br><span class="line">     C.1 C.2 C.3</span><br><span class="line">row1   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">row2  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数据与矩阵类似，但是维度可以大于2，通过array函数创建</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; array(<span class="number">1</span>:<span class="number">3</span>, c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line">, , <span class="number">1</span></span><br><span class="line"></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">3</span>    <span class="number">2</span>    <span class="number">1</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">1</span>    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">2</span></span><br><span class="line"></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">3</span>    <span class="number">2</span>    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">3</span>    <span class="number">2</span>    <span class="number">1</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">3</span></span><br><span class="line"></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">2</span>    <span class="number">1</span>    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">3</span>    <span class="number">2</span>    <span class="number">1</span>    <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><p>数据帧是表格对象，与矩阵不同，每列可以包含不同的数据类型，通过data.frame函数创建</p><p>要学会使用help，这次输出 <code>help(&quot;data.frame&quot;)</code> 查看用例，下面给出一个示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; data.frame(<span class="number">1</span>, <span class="number">1</span>:<span class="number">10</span>, sample(LETTERS[<span class="number">1</span>:<span class="number">3</span>], <span class="number">10</span>, replace = <span class="literal">TRUE</span>))</span><br><span class="line">   X1 X1.10 sample.LETTERS.1.3...10..replace...TRUE.</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>     <span class="number">1</span>                                        C</span><br><span class="line"><span class="number">2</span>   <span class="number">1</span>     <span class="number">2</span>                                        A</span><br><span class="line"><span class="number">3</span>   <span class="number">1</span>     <span class="number">3</span>                                        C</span><br><span class="line"><span class="number">4</span>   <span class="number">1</span>     <span class="number">4</span>                                        A</span><br><span class="line"><span class="number">5</span>   <span class="number">1</span>     <span class="number">5</span>                                        C</span><br><span class="line"><span class="number">6</span>   <span class="number">1</span>     <span class="number">6</span>                                        C</span><br><span class="line"><span class="number">7</span>   <span class="number">1</span>     <span class="number">7</span>                                        A</span><br><span class="line"><span class="number">8</span>   <span class="number">1</span>     <span class="number">8</span>                                        A</span><br><span class="line"><span class="number">9</span>   <span class="number">1</span>     <span class="number">9</span>                                        A</span><br><span class="line"><span class="number">10</span>  <span class="number">1</span>    <span class="number">10</span>                                        B</span><br></pre></td></tr></table></figure><h3 id="因子"><a href="#因子" class="headerlink" title="因子"></a>因子</h3><p>因子标签始终是字符型，无论输入向量是数值型、字符型还是逻辑性。因子将向量存储在向量中的元素的不同值作为标签</p><p>因子使用<code>factor()</code>函数创建。<code>nlevels</code>函数给出了级别的计数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apple_colors &lt;- c(<span class="string">'green'</span>,<span class="string">'green'</span>,<span class="string">'yellow'</span>,<span class="string">'red'</span>,<span class="string">'red'</span>,<span class="string">'red'</span>,<span class="string">'green'</span>)</span><br><span class="line"></span><br><span class="line">factor_apple &lt;- factor(apple_colors)</span><br><span class="line"></span><br><span class="line">print(factor_apple)</span><br><span class="line">print(nlevels(factor_apple))</span><br></pre></td></tr></table></figure><p>执行上述代码，会产生一下结果</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] green  green  yellow red    red    red    green </span><br><span class="line">Levels: green red yellow</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表是一些对象成分的集合，包括上面的数据结构。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; list(c(<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>),<span class="number">52.8</span>,<span class="literal">TRUE</span>)</span><br><span class="line">[[<span class="number">1</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="number">52.8</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">3</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>对象的名称由大小写字母、数字0-9、点号和下划线组成，名称是区分大小写的，不能以数字开头 ，以字母开头，或者点后面不带数字</p><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>变量可以使用向左、向右和等于运算符分配值</p><p><strong>&lt;-    &lt;&lt;-    =    叫作左分配符</strong></p><p><strong>-&gt;    -&gt;&gt;    叫作右分配符</strong></p><h3 id="其它运算符"><a href="#其它运算符" class="headerlink" title="其它运算符"></a>其它运算符</h3><h4 id="冒号运算符-："><a href="#冒号运算符-：" class="headerlink" title="冒号运算符    ："></a>冒号运算符    ：</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span>:<span class="number">10</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="成员运算符-in"><a href="#成员运算符-in" class="headerlink" title="成员运算符    %in%"></a>成员运算符    %in%</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; v1 &lt;- <span class="number">8</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; t &lt;- <span class="number">1</span>:<span class="number">10</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; print(v1 %<span class="keyword">in</span>% t)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><h4 id="转置相乘"><a href="#转置相乘" class="headerlink" title="转置相乘 %*%"></a>转置相乘 %*%</h4><p>该运算符用于将矩阵与其转置相乘</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; M = matrix( c(<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>), nrow = <span class="number">2</span>,ncol = <span class="number">3</span>,byrow = <span class="literal">TRUE</span>)</span><br><span class="line">&gt; </span><br><span class="line">&gt; t = M %*% t(M)</span><br><span class="line">&gt; </span><br><span class="line">&gt; print(t)</span><br><span class="line"></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>,]   <span class="number">65</span>   <span class="number">82</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="number">82</span>  <span class="number">117</span></span><br></pre></td></tr></table></figure><p><strong>除此之外还需要注意的点</strong></p><p><strong>语句之间用分号; 或者 换行符 \n 分隔</strong></p><p><strong>print()或cat()函数打印变量的值</strong></p><p><strong>cat可以将多个变量打印输出，逗号分隔</strong></p><p><strong>变量查找、添加和删除</strong></p><p><strong>查找和添加用下标</strong></p><p><strong>删除变量用rm()函数</strong></p><p><strong>这里就不多介绍了</strong></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>算术运算符、逻辑运算符、all()和any()、位运算符</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><h4 id="加法"><a href="#加法" class="headerlink" title="加法 +"></a>加法 +</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- -<span class="number">1</span>:<span class="number">9</span></span><br><span class="line">&gt; x + <span class="number">1</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line">&gt; x + <span class="number">1</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line">&gt; x + <span class="number">2</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">&gt; x * <span class="number">2</span> + <span class="number">3</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">9</span> <span class="number">11</span> <span class="number">13</span> <span class="number">15</span> <span class="number">17</span> <span class="number">19</span> <span class="number">21</span></span><br></pre></td></tr></table></figure><h4 id="减法"><a href="#减法" class="headerlink" title="减法 -"></a>减法 -</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>);</span><br><span class="line">&gt; t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">&gt; print(v-t);</span><br><span class="line">[<span class="number">1</span>] -<span class="number">6.0</span>  <span class="number">2.5</span>  <span class="number">2.0</span></span><br></pre></td></tr></table></figure><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法 *"></a>乘法 *</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;  v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>);</span><br><span class="line">&gt;  t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">&gt;  print(v * t);</span><br><span class="line">[<span class="number">1</span>] <span class="number">16.0</span> <span class="number">16.5</span> <span class="number">24.0</span></span><br></pre></td></tr></table></figure><p>以下运算符就自己多手动实践啦！不知道的可以多help，比如help(“+”)都可以的</p><p><strong>除法 /</strong></p><p><strong>求余 %%</strong></p><p><strong>求模 %/%</strong></p><p><strong>求指数幂 ^</strong></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h4 id="大于"><a href="#大于" class="headerlink" title="大于"></a>大于</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; v &lt;- c(<span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>,<span class="number">9</span>);</span><br><span class="line">&gt; t &lt;- c(<span class="number">8</span>,<span class="number">2.5</span>,<span class="number">14</span>,<span class="number">9</span>);</span><br><span class="line">&gt; print(v&gt;t);</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><p><em>这里就不多介绍了</em></p><p><strong>小于</strong></p><p><strong>等于 ==</strong></p><p><strong>小于或等于 &lt;=</strong></p><p><strong>大于或等于 &gt;=</strong></p><p><strong>不等于 !=</strong></p><p><strong><em>~注意~</em></strong></p><p><strong><em>&amp; | 作用在两个向量相应元素上进行比较</em></strong></p><p><strong><em>&amp;&amp; 和 || 只作用在对象的第一个元素上</em></strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function_name &lt;- <span class="keyword">function</span>(arg_1, arg_2, <span class="keyword">...</span>) &#123;</span><br><span class="line"></span><br><span class="line">Function body</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数由不同的组件组成，它们是：</p><p><strong>函数名称</strong> <code>function_name</code></p><p><strong>参数</strong> <code>arg_1, arg_2, ...</code></p><p><strong>函数体</strong> <code>Function body</code></p><p><strong>返回值</strong> <code>return</code></p><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p><code>seq()</code> , <code>mean()</code> , <code>max()</code> , <code>sum()</code> , <code>paste()</code> </p><h3 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new.function &lt;- <span class="keyword">function</span>(a) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:a) &#123;</span><br><span class="line"></span><br><span class="line">        b &lt;- i^<span class="number">2</span></span><br><span class="line"></span><br><span class="line">        print(b)</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>调用函数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new.function(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>也可以调用没有参数的函数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new.function &lt;- <span class="keyword">function</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">10</span>:<span class="number">20</span>) &#123;</span><br><span class="line"></span><br><span class="line">print(i^<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">new.function()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为什么要学习R语言？我这里可能往大数据方向发展，有可能往人工智能方向发展，也有可能往算法方向发展。人生有太多的不确定因素，既然自己想着要学那就慢慢来学呗。充满希望的旅途胜过终点的到达。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;START&quot;&gt;&lt;a href=&quot;#START&quot; class=&quot;headerlink&quot; title=&quot;START&quot;&gt;&lt;/a&gt;START&lt;/h1&gt;&lt;h2 id=&quot;为什么要使用R？&quot;&gt;&lt;a href=&quot;#为什么要使用R？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用R？&quot;&gt;&lt;/a&gt;为什么要使用R？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;多数商业统计软件价格不菲，投入成千上万美元都是可能的。而R是免费的！&lt;/p&gt;
&lt;p&gt;R拥有顶尖水准的制图功能。如果希望复杂数据可视化，那么R拥有最全面且最强大的一&lt;br&gt;系列可用功能。&lt;/p&gt;
&lt;p&gt;R是一个可进行交互式数据分析和探索的强大平台。&lt;/p&gt;
&lt;p&gt;R是一个无与伦比的平台，在其上可使用一种简单而直接的方式编写新的统计方法。它易&lt;br&gt;于扩展，并为快速编程实现新方法提供了一套十分自然的语言。&lt;/p&gt;
&lt;p&gt;R可运行于多种平台之上，包括Windows、UNIX和Mac OS X。这基本上意味着它可以运&lt;br&gt;行于你所能拥有的任何计算机上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面展示R制图功能的一个示例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/09/18/iZXSG8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="https://zoukeqing.top/categories/R/"/>
    
    
      <category term="R" scheme="https://zoukeqing.top/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>今天分享一个很不错的Chrome扩展程序</title>
    <link href="https://zoukeqing.top/2018/09/14/chrome-plug-in-full-page-screen-capture/"/>
    <id>https://zoukeqing.top/2018/09/14/chrome-plug-in-full-page-screen-capture/</id>
    <published>2018-09-14T09:01:11.000Z</published>
    <updated>2018-09-14T10:41:37.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PLUG-IN"><a href="#PLUG-IN" class="headerlink" title="PLUG IN"></a>PLUG IN</h1><blockquote><p>完整可靠地捕获当前页面的屏幕截图，无需任何额外权限！</p><p>获取当前浏览器窗口的完整页面截图的最简单方法。单击扩展图标（或按Alt + Shift + P），观看扩展捕获页面的每个部分，然后将其传输到屏幕截图的新选项卡，您可以将其作为图像或PDF下载，甚至只需将其拖动即可到你的桌面。</p><p><em>没有臃肿，没有广告，没有不必要的权限，只是将完整的网页转换为图像的简单方法。</em></p><p><em>NEW：</em>先进的屏幕捕获技术处理复杂的页面 - 包括内部可滚动元素以及嵌入式iframe - 与任何其他扩展不同。如果您遇到问题，请通过捕获页面上的客户支持标志图标进行报告，以便我们为您和使用它的所有其他人改进扩展程序。</p><p>为了截取整个页面，它必须滚动到每个可见部分，所以请耐心等待，因为它可以快速组装所有部分。对于罕见的情况，您的网页太大而Chrome无法存储在一个图片中，它会让您知道并将其拆分为单独标签中的图片。</p><p>将结果导出为PNG，JPEG或各种PDF纸张尺寸 - 所有这些都可以从扩展程序的选项中进行配置。</p><p>此扩展由独立开发人员运行。在github上查看原始的开源项目：https：//github.com/mrcoles/full-page-screen-capture-chrome-extension</p></blockquote><a id="more"></a><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>下载安装有两种方式：</p><ul><li><p>一种是直接从Chrome网上应用店搜索 <code>Full Page Screen Capture</code> 进行直接安装</p><p>地址：<a href="https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl</a></p></li><li><p>另一种通过打包扩展程序，打包成crx格式，使用开发模式进行安装</p></li></ul><p><strong>下面就介绍最后一种的</strong></p><p>下载 <code>Full Page Screen Capture</code> 程序，微云链接：<a href="https://share.weiyun.com/5GBowk1" target="_blank" rel="noopener">https://share.weiyun.com/5GBowk1</a> 密码：73rrb5</p><!-- **在后台回复 `73rrb5` 获取crx格式程序文件，前提是有Chrome浏览器** --><p>下载后地址栏输入 <code>chrome://extensions/</code> ，打开开发者模式，将文件拖拽到扩展程序那一栏里，并添加扩展程序</p><p><img src="https://s1.ax1x.com/2018/09/14/iEh3b4.png" alt="添加扩展程序"></p><p><strong>随意打开你要捕获页面全屏的，点击右上角程序图标键</strong></p><p>比如我输入 <code>zoukeqing.top</code> ,点击右上角功能键，静候，出现的效果如下</p><p><img src="https://s1.ax1x.com/2018/09/14/iEhGVJ.png" alt="博客效果"></p><p>Full Page Screen Capture 微云链接：<a href="https://share.weiyun.com/5GBowk1" target="_blank" rel="noopener">https://share.weiyun.com/5GBowk1</a> 密码：73rrb5</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PLUG-IN&quot;&gt;&lt;a href=&quot;#PLUG-IN&quot; class=&quot;headerlink&quot; title=&quot;PLUG IN&quot;&gt;&lt;/a&gt;PLUG IN&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;完整可靠地捕获当前页面的屏幕截图，无需任何额外权限！&lt;/p&gt;
&lt;p&gt;获取当前浏览器窗口的完整页面截图的最简单方法。单击扩展图标（或按Alt + Shift + P），观看扩展捕获页面的每个部分，然后将其传输到屏幕截图的新选项卡，您可以将其作为图像或PDF下载，甚至只需将其拖动即可到你的桌面。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;没有臃肿，没有广告，没有不必要的权限，只是将完整的网页转换为图像的简单方法。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NEW：&lt;/em&gt;先进的屏幕捕获技术处理复杂的页面 - 包括内部可滚动元素以及嵌入式iframe - 与任何其他扩展不同。如果您遇到问题，请通过捕获页面上的客户支持标志图标进行报告，以便我们为您和使用它的所有其他人改进扩展程序。&lt;/p&gt;
&lt;p&gt;为了截取整个页面，它必须滚动到每个可见部分，所以请耐心等待，因为它可以快速组装所有部分。对于罕见的情况，您的网页太大而Chrome无法存储在一个图片中，它会让您知道并将其拆分为单独标签中的图片。&lt;/p&gt;
&lt;p&gt;将结果导出为PNG，JPEG或各种PDF纸张尺寸 - 所有这些都可以从扩展程序的选项中进行配置。&lt;/p&gt;
&lt;p&gt;此扩展由独立开发人员运行。在github上查看原始的开源项目：https：//github.com/mrcoles/full-page-screen-capture-chrome-extension&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Chrome" scheme="https://zoukeqing.top/categories/Chrome/"/>
    
    
      <category term="Chrome" scheme="https://zoukeqing.top/tags/Chrome/"/>
    
      <category term="Plug in" scheme="https://zoukeqing.top/tags/Plug-in/"/>
    
  </entry>
  
  <entry>
    <title>有Docker？这可能学习Linux最好的方式</title>
    <link href="https://zoukeqing.top/2018/09/13/learning-linux/"/>
    <id>https://zoukeqing.top/2018/09/13/learning-linux/</id>
    <published>2018-09-13T00:08:08.000Z</published>
    <updated>2018-09-13T03:56:47.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、 telnet 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。 BusyBox 可运行于多款 POSIX 环境的操作系统中，如 Linux（包括 Android）、Hurd、 FreeBSD 等。</p><a id="more"></a><h1 id="Docker需要掌握的知识点"><a href="#Docker需要掌握的知识点" class="headerlink" title="Docker需要掌握的知识点"></a>Docker需要掌握的知识点</h1><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>不知道具体参数的可以<code>docker pull --help</code></p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态 （ stopped ）的容器重新启动。 因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p><p>处于终止状态的容器，可以通过 <code>docker container start</code> 命令来重新启动。 此外， <code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p><h3 id="新建并启动"><a href="#新建并启动" class="headerlink" title="新建并启动"></a>新建并启动</h3><p><code>docker run</code></p><h3 id="启动已终止容器"><a href="#启动已终止容器" class="headerlink" title="启动已终止容器"></a>启动已终止容器</h3><p><code>docker container start</code></p><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><p><code>docker container stop</code> 来终止一个运行中的容器</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><h4 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h4><p><code>docker attach</code>是Docker自带的命令，下面示例就如何使用该命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">7fb6406e7f98        busybox             &quot;sh&quot;                11 hours ago        Up 3 seconds                            upbeat_neumann</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker attach 7fb</span><br><span class="line">/ # exit</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">7fb6406e7f98        busybox             &quot;sh&quot;                11 hours ago        Exited (0) 3 seconds ago                       upbeat_neumann</span><br></pre></td></tr></table></figure><p>可以发现如果从这个 stdin 中 exit，会导致容器的停止。</p><h4 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h4><p><code>docker exec</code> 后面可以跟多个参数，比如 -i -t参数</p><p>只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执 行结果仍然可以返回。 当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p><p>下面示例就如何使用该命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">7fb6406e7f98        busybox             &quot;sh&quot;                11 hours ago        Exited (2) 7 seconds ago                       upbeat_neumann</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker container start 7fb</span><br><span class="line">7fb</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker exec -it 7fb sh</span><br><span class="line">/ # exit</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">7fb6406e7f98        busybox             &quot;sh&quot;                11 hours ago        Up 24 seconds                           upbeat_neumann</span><br></pre></td></tr></table></figure><p>所以若是不希望容器停止的话建议使用docker exec命令</p><h4 id="使用–help"><a href="#使用–help" class="headerlink" title="使用–help"></a>使用–help</h4><p>分别输入 <code>docker attach --help</code> 和 <code>docker exec --help</code> 可以发现它们的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker attach --help</span><br><span class="line"></span><br><span class="line">Usage:  docker attach [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Attach local standard input, output, and error streams to a running container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a</span><br><span class="line">                             container</span><br><span class="line">      --no-stdin             Do not attach STDIN</span><br><span class="line">      --sig-proxy            Proxy all received signals to the process</span><br><span class="line">                             (default true)</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker exec --help</span><br><span class="line"></span><br><span class="line">Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"></span><br><span class="line">Run a command in a running container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -d, --detach               Detached mode: run command in the background</span><br><span class="line">      --detach-keys string   Override the key sequence for detaching a</span><br><span class="line">                             container</span><br><span class="line">  -e, --env list             Set environment variables</span><br><span class="line">  -i, --interactive          Keep STDIN open even if not attached</span><br><span class="line">      --privileged           Give extended privileges to the command</span><br><span class="line">  -t, --tty                  Allocate a pseudo-TTY</span><br><span class="line">  -u, --user string          Username or UID (format:</span><br><span class="line">                             &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class="line">  -w, --workdir string       Working directory inside the container</span><br></pre></td></tr></table></figure><p>从上面Usage可以看到 <code>docker attach</code> 除了参数只能后面带容器，而 <code>docker exec</code> 容器后面就必须有命令。</p><p><code>docker exec</code> 后面带什么命令可由 <code>docker ps -a</code> 查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">7fb6406e7f98        busybox             &quot;sh&quot;                11 hours ago        Up 14 minutes                           upbeat_neumann</span><br></pre></td></tr></table></figure><p>说明带 <code>sh</code> 命令就行了，如果COMMAND不显示命令，可能一般是/bin/bash或者/bin/sh，下面就试试看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker exec -it 7fb /bin/sh</span><br><span class="line">/ # exit</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker exec -it 7fb /bin/bash</span><br><span class="line">OCI runtime exec failed: exec failed: container_linux.go:348: starting container process caused &quot;exec: \&quot;/bin/bash\&quot;: stat /bin/bash: no such file or directory&quot;: unknown</span><br></pre></td></tr></table></figure><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p><code>docker container rm</code> </p><h2 id="清理所有处于终止状态的容器"><a href="#清理所有处于终止状态的容器" class="headerlink" title="清理所有处于终止状态的容器"></a>清理所有处于终止状态的容器</h2><p><code>docker container ls -a</code> 查看所有已经创建的包括终止状态的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="获取官方镜像"><a href="#获取官方镜像" class="headerlink" title="获取官方镜像"></a>获取官方镜像</h2><p>首先 <code>docker search busybox</code> 查看镜像信息，选择官方的一种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\zoukeqing&gt;docker search busybox</span><br><span class="line"></span><br><span class="line">NAME                        DESCRIPTION                                     STARS               OFFICIAL            AUTO                                                                     MATED</span><br><span class="line"></span><br><span class="line">busybox                     Busybox base image.                             1354                [OK]</span><br><span class="line"></span><br><span class="line">progrium/busybox                                                            68                                      [OK]</span><br><span class="line"></span><br><span class="line">hypriot/rpi-busybox-httpd   Raspberry Pi compatible Docker Image with a …   44</span><br><span class="line"></span><br><span class="line">radial/busyboxplus          Full-chain, Internet enabled, busybox made f…   20                                      [OK                                                                     ]</span><br><span class="line"></span><br><span class="line">hypriot/armhf-busybox       Busybox base image for ARM.                     9</span><br><span class="line"></span><br><span class="line">arm32v7/busybox             Busybox base image.                             6</span><br><span class="line"></span><br><span class="line">armhf/busybox               Busybox base image.                             4</span><br><span class="line"></span><br><span class="line">yauritux/busybox-curl       Busybox with CURL                               3</span><br><span class="line"></span><br><span class="line">p7ppc64/busybox             Busybox base image for ppc64.                   2</span><br><span class="line"></span><br><span class="line">prom/busybox                Prometheus Busybox Docker base images           2                                       [OK]</span><br><span class="line"></span><br><span class="line">odise/busybox-curl                                                          2                                       [OK]</span><br><span class="line"></span><br><span class="line">aarch64/busybox             Busybox base image.                             2</span><br><span class="line"></span><br><span class="line">s390x/busybox               Busybox base image.                             2</span><br><span class="line"></span><br><span class="line">onsi/grace-busybox                                                          2</span><br><span class="line"></span><br><span class="line">armel/busybox               Busybox base image.                             2</span><br><span class="line"></span><br><span class="line">i386/busybox                Busybox base image.                             2</span><br><span class="line"></span><br><span class="line">sequenceiq/busybox                                                          2                                       [OK]</span><br><span class="line"></span><br><span class="line">arm64v8/busybox             Busybox base image.                             1</span><br><span class="line"></span><br><span class="line">spotify/busybox             Spotify fork of &lt;https://hub.docker.com/_/bus&gt;…   1</span><br><span class="line"></span><br><span class="line">ppc64le/busybox             Busybox base image.                             1</span><br><span class="line"></span><br><span class="line">trollin/busybox                                                             0</span><br><span class="line"></span><br><span class="line">cfgarden/garden-busybox                                                     0</span><br><span class="line"></span><br><span class="line">ggtools/busybox-ubuntu      Busybox ubuntu version with extra goodies       0                                       [OK]</span><br><span class="line"></span><br><span class="line">concourse/busyboxplus                                                       0</span><br><span class="line"></span><br><span class="line">amd64/busybox               Busybox base image.                             0</span><br></pre></td></tr></table></figure><p>可以看到最受欢迎的镜像同时带有 OFFICIAL 标记，说明它是官方镜像。</p><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p><strong>使用 <code>docker pull</code> 指令下载镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\zoukeqing&gt;docker pull busybox</span><br><span class="line"></span><br><span class="line">Using default tag: latest</span><br><span class="line"></span><br><span class="line">latest: Pulling from library/busybox</span><br><span class="line"></span><br><span class="line">8c5a7da1afbc: Pull complete</span><br><span class="line"></span><br><span class="line">Digest: sha256:cb63aa0641a885f54de20f61d152187419e8f6b159ed11a251a09d115fdff9bd</span><br><span class="line"></span><br><span class="line">Status: Downloaded newer image for busybox:latest</span><br></pre></td></tr></table></figure><p>下面查看镜像可以看到busybox镜像只有1.16MB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker images busybox</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"></span><br><span class="line">busybox             latest              e1ddd7948a1c        6 weeks ago         1.16MB</span><br></pre></td></tr></table></figure><h2 id="启动并运行"><a href="#启动并运行" class="headerlink" title="启动并运行"></a>启动并运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker run -it busybox</span><br><span class="line"></span><br><span class="line">/ # grep</span><br><span class="line"></span><br><span class="line">BusyBox v1.29.2 (2018-07-31 20:19:16 UTC) multi-call binary.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage: grep [-HhnlLoqvsriwFE][-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Search for PATTERN in FILEs (or stdin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        -H      Add &apos;filename:&apos; prefix</span><br><span class="line"></span><br><span class="line">        -h      Do not add &apos;filename:&apos; prefix</span><br><span class="line"></span><br><span class="line">        -n      Add &apos;line_no:&apos; prefix</span><br><span class="line"></span><br><span class="line">        -l      Show only names of files that match</span><br><span class="line"></span><br><span class="line">        -L      Show only names of files that don&apos;t match</span><br><span class="line"></span><br><span class="line">        -c      Show only count of matching lines</span><br><span class="line"></span><br><span class="line">        -o      Show only the matching part of line</span><br><span class="line"></span><br><span class="line">        -q      Quiet. Return 0 if PATTERN is found, 1 otherwise</span><br><span class="line"></span><br><span class="line">        -v      Select non-matching lines</span><br><span class="line"></span><br><span class="line">        -s      Suppress open and read errors</span><br><span class="line"></span><br><span class="line">        -r      Recurse</span><br><span class="line"></span><br><span class="line">        -i      Ignore case</span><br><span class="line"></span><br><span class="line">        -w      Match whole words only</span><br><span class="line"></span><br><span class="line">        -x      Match whole lines only</span><br><span class="line"></span><br><span class="line">        -F      PATTERN is a literal (not regexp)</span><br><span class="line"></span><br><span class="line">        -E      PATTERN is an extended regexp</span><br><span class="line"></span><br><span class="line">        -m N    Match up to N times per file</span><br><span class="line"></span><br><span class="line">        -A N    Print N lines of trailing context</span><br><span class="line"></span><br><span class="line">        -B N    Print N lines of leading context</span><br><span class="line"></span><br><span class="line">        -C N    Same as &apos;-A N -B N&apos;</span><br><span class="line"></span><br><span class="line">        -e PTRN Pattern to match</span><br><span class="line"></span><br><span class="line">        -f FILE Read pattern from file</span><br><span class="line"></span><br><span class="line">/ # mount</span><br><span class="line"></span><br><span class="line">overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/ESBXGMI6VSIGTBUC3AVDZMHX3O:/var/lib/docker/overlay2/l/WHC32OFN4EESZIFRWLEFN7HZT4,upperdir=/var/lib/docker/overlay2/acbeca1c1bd1a1af6d26338c48ba5fbee83883c61034220209f76181ddcd08a1/diff,workdir=/var/lib/docker/overlay2/acbeca1c1bd1a1af6d26338c48ba5fbee83883c61034220209f76181ddcd08a1/work)</span><br><span class="line"></span><br><span class="line">proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line"></span><br><span class="line">tmpfs on /dev type tmpfs (rw,nosuid,size=65536k,mode=755)</span><br><span class="line"></span><br><span class="line">devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)</span><br><span class="line"></span><br><span class="line">sysfs on /sys type sysfs (ro,nosuid,nodev,noexec,relatime)</span><br><span class="line"></span><br><span class="line">tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,relatime,mode=755)</span><br><span class="line"></span><br><span class="line">cpuset on /sys/fs/cgroup/cpuset type cgroup (ro,nosuid,nodev,noexec,relatime,cpuset)</span><br><span class="line"></span><br><span class="line">cpu on /sys/fs/cgroup/cpu type cgroup (ro,nosuid,nodev,noexec,relatime,cpu)</span><br><span class="line"></span><br><span class="line">cpuacct on /sys/fs/cgroup/cpuacct type cgroup (ro,nosuid,nodev,noexec,relatime,cpuacct)</span><br><span class="line"></span><br><span class="line">blkio on /sys/fs/cgroup/blkio type cgroup (ro,nosuid,nodev,noexec,relatime,blkio)</span><br><span class="line"></span><br><span class="line">memory on /sys/fs/cgroup/memory type cgroup (ro,nosuid,nodev,noexec,relatime,memory)</span><br><span class="line"></span><br><span class="line">devices on /sys/fs/cgroup/devices type cgroup (ro,nosuid,nodev,noexec,relatime,devices)</span><br><span class="line"></span><br><span class="line">freezer on /sys/fs/cgroup/freezer type cgroup (ro,nosuid,nodev,noexec,relatime,freezer)</span><br><span class="line"></span><br><span class="line">net_cls on /sys/fs/cgroup/net_cls type cgroup (ro,nosuid,nodev,noexec,relatime,net_cls)</span><br><span class="line"></span><br><span class="line">perf_event on /sys/fs/cgroup/perf_event type cgroup (ro,nosuid,nodev,noexec,relatime,perf_event)</span><br><span class="line"></span><br><span class="line">net_prio on /sys/fs/cgroup/net_prio type cgroup (ro,nosuid,nodev,noexec,relatime,net_prio)</span><br><span class="line"></span><br><span class="line">hugetlb on /sys/fs/cgroup/hugetlb type cgroup (ro,nosuid,nodev,noexec,relatime,hugetlb)</span><br><span class="line"></span><br><span class="line">pids on /sys/fs/cgroup/pids type cgroup (ro,nosuid,nodev,noexec,relatime,pids)</span><br><span class="line"></span><br><span class="line">cgroup on /sys/fs/cgroup/systemd type cgroup (ro,nosuid,nodev,noexec,relatime,name=systemd)</span><br><span class="line"></span><br><span class="line">mqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line"></span><br><span class="line">/dev/sda1 on /etc/resolv.conf type ext4 (rw,relatime,data=ordered)</span><br><span class="line"></span><br><span class="line">/dev/sda1 on /etc/hostname type ext4 (rw,relatime,data=ordered)</span><br><span class="line"></span><br><span class="line">/dev/sda1 on /etc/hosts type ext4 (rw,relatime,data=ordered)</span><br><span class="line"></span><br><span class="line">shm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)</span><br><span class="line"></span><br><span class="line">devpts on /dev/console type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)</span><br><span class="line"></span><br><span class="line">proc on /proc/bus type proc (ro,relatime)</span><br><span class="line"></span><br><span class="line">proc on /proc/fs type proc (ro,relatime)</span><br><span class="line"></span><br><span class="line">proc on /proc/irq type proc (ro,relatime)</span><br><span class="line"></span><br><span class="line">proc on /proc/sys type proc (ro,relatime)</span><br><span class="line"></span><br><span class="line">proc on /proc/sysrq-trigger type proc (ro,relatime)</span><br><span class="line"></span><br><span class="line">tmpfs on /proc/acpi type tmpfs (ro,relatime)</span><br><span class="line"></span><br><span class="line">tmpfs on /proc/kcore type tmpfs (rw,nosuid,size=65536k,mode=755)</span><br><span class="line"></span><br><span class="line">tmpfs on /proc/keys type tmpfs (rw,nosuid,size=65536k,mode=755)</span><br><span class="line"></span><br><span class="line">tmpfs on /proc/timer_list type tmpfs (rw,nosuid,size=65536k,mode=755)</span><br><span class="line"></span><br><span class="line">tmpfs on /proc/sched_debug type tmpfs (rw,nosuid,size=65536k,mode=755)</span><br><span class="line"></span><br><span class="line">tmpfs on /sys/firmware type tmpfs (ro,relatime)</span><br><span class="line"></span><br><span class="line">/ # exit</span><br></pre></td></tr></table></figure><p>-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。</p><p><strong>下面查看状态，已停止，说明自动停止</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                     PORTS               NAMES</span><br><span class="line"></span><br><span class="line">7fb6406e7f98        busybox             &quot;sh&quot;                About a minute ago   Exited (0) 8 seconds ago                       upbeat_neumann</span><br></pre></td></tr></table></figure><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>前面需要Docker的知识也基本掌握了，接下来就开始学习Linux啦。。。</p><p>网上有很多教程，可以参考菜鸟教程和易百教程，这里就不介绍啦！ :blush:</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、 telnet 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。 BusyBox 可运行于多款 POSIX 环境的操作系统中，如 Linux（包括 Android）、Hurd、 FreeBSD 等。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://zoukeqing.top/categories/Docker/"/>
    
      <category term="Linux" scheme="https://zoukeqing.top/categories/Docker/Linux/"/>
    
    
      <category term="Docker" scheme="https://zoukeqing.top/tags/Docker/"/>
    
      <category term="Linux" scheme="https://zoukeqing.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="https://zoukeqing.top/2018/09/12/docker-started/"/>
    <id>https://zoukeqing.top/2018/09/12/docker-started/</id>
    <published>2018-09-12T11:21:41.000Z</published>
    <updated>2018-09-12T14:30:27.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>开始之前最好了解<a href="https://www.docker.com/why-docker" target="_blank" rel="noopener">什么是Dockers</a>以及<a href="https://www.docker.com/customers" target="_blank" rel="noopener">为何使用Dockers</a> </p></blockquote><h2 id="什么是Dockers"><a href="#什么是Dockers" class="headerlink" title="什么是Dockers"></a>什么是Dockers</h2><p>将软件打包成标准化单元，用于开发、装运和部署</p><h2 id="为什么要使用Dockers"><a href="#为什么要使用Dockers" class="headerlink" title="为什么要使用Dockers"></a>为什么要使用Dockers</h2><p>了解容器和容器平台之间的差异，解决日益多样化的IT环境所需的条件以及企业在评估解决方案时应该考虑的能力</p><h3 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h3><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">容器</th><th style="text-align:center">虚拟机</th></tr></thead><tbody><tr><td style="text-align:center">启动</td><td style="text-align:center">秒级</td><td style="text-align:center">分钟级</td></tr><tr><td style="text-align:center">硬盘容量</td><td style="text-align:center">一般为MB</td><td style="text-align:center">一般为GB</td></tr><tr><td style="text-align:center">效能</td><td style="text-align:center">接近原生</td><td style="text-align:center">比较慢</td></tr><tr><td style="text-align:center">系统支援量</td><td style="text-align:center">单机支持上千个容器</td><td style="text-align:center">一般几十个</td></tr></tbody></table><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Docker 包括三个基本概念</p><ul><li>镜像（ Image ）</li><li>容器（ Container ）</li><li>仓库（ Repository ）</li></ul><p>理解了这三个概念，就理解了 Docker 的整个生命周期。</p><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><p>官方网站上都有各种环境下的<a href="https://www.docker.com/get-started" target="_blank" rel="noopener">安装指南</a>，这里就介绍windows 10 pro的安装方法</p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>Docker for Windows 支持 64 位版本的 Windows 10 Pro，且必须开启 Hyper-V</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要windows container建议安装Edge版本的Docker for Windows</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在 Windows 搜索栏输入 Docker 点击 Docker for Windows ，登陆用户名密码 Get it</p><h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><p>常见的镜像加速器有：</p><ul><li>Docker 官方提供的中国镜像</li><li>阿里云加速器</li><li>DaoCloud加速器</li></ul><p>这里我选择Docker官方提供的中国加速器，右下加右键Docker图标，选择Settings，接着选择Daemon，在Registry mirrors添加 <a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a></p><h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>运行<code>docker --version</code>进行确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.06.1-ce</span><br><span class="line"> API version:       1.38</span><br><span class="line"> Go version:        go1.10.3</span><br><span class="line"> Git commit:        e68fc7a</span><br><span class="line"> Built:             Tue Aug 21 17:21:34 2018</span><br><span class="line"> OS/Arch:           windows/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.06.1-ce</span><br><span class="line">  API version:      1.38 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.3</span><br><span class="line">  Git commit:       e68fc7a</span><br><span class="line">  Built:            Tue Aug 21 17:29:02 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     true</span><br></pre></td></tr></table></figure><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>拉取镜像并测试环境出现Hello from Docker！说明运行成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker run hello-world</span><br><span class="line">Unable to find image 'hello-world:latest' locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">d1725b59e92d: Pull complete</span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span> docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>此时<code>docker images</code>可以查看镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              4ab4c602aa5e        4 days ago          1.84kB</span><br></pre></td></tr></table></figure><p>此时删除hello-world遇到异常错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker rmi hello-world</span><br><span class="line">Error response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container 026e29eb7592 is using its referenced image 4ab4c602aa5e</span><br></pre></td></tr></table></figure><p>输入<code>docker ps -a</code>查看容器，或者<code>docker container ls -a</code>也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">026e29eb7592        hello-world         &quot;/hello&quot;            10 minutes ago      Exited (0) 10 minutes ago                          inspiring_bartik</span><br><span class="line">f4d65a6a8b08        hello-world         &quot;/hello&quot;            About an hour ago   Exited (0) About an hour ago                       clever_leakey</span><br><span class="line">G:\Docker&gt;docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">026e29eb7592        hello-world         &quot;/hello&quot;            12 minutes ago      Exited (0) 12 minutes ago                          inspiring_bartik</span><br><span class="line">f4d65a6a8b08        hello-world         &quot;/hello&quot;            About an hour ago   Exited (0) About an hour ago</span><br></pre></td></tr></table></figure><p>有两个容器在使用hello-world镜像，那么就删除容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker container rm 026</span><br><span class="line">026</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker container rm f4d</span><br><span class="line">f4d</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure><p>最后清理所有处于终止状态的容器，避免文件残留。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker container prune</span><br><span class="line">WARNING! This will remove all stopped containers.</span><br><span class="line">Are you sure you want to continue? [y/N] Y</span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure><p>最后删除镜像。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker rmi hello-world</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Deleted: sha256:4ab4c602aa5eed5528a6620ff18a1dc4faef0e1ab3a5eddeddb410714478c67f</span><br><span class="line">Deleted: sha256:428c97da766c4c13b19088a471de6b622b038f3ae8efa10ec5a37d6d31a2df0b</span><br></pre></td></tr></table></figure><h2 id="用ID、镜像名删除镜像"><a href="#用ID、镜像名删除镜像" class="headerlink" title="用ID、镜像名删除镜像"></a>用ID、镜像名删除镜像</h2><p>这里用ID删除，注意只能<code>删除docker images ls</code>能显示的镜像，只要选前面几个字符就可以删除了，当然也能删除到其它前面几个字符相同的</p><h1 id="创建一个Nginx服务器"><a href="#创建一个Nginx服务器" class="headerlink" title="创建一个Nginx服务器"></a>创建一个Nginx服务器</h1><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker search nginx</span><br><span class="line">NAME                                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                                                  Official build of Nginx.                        9577                [OK]</span><br><span class="line">jwilder/nginx-proxy                                    Automated Nginx reverse proxy for docker con…   1402                                    [OK]</span><br><span class="line">richarvey/nginx-php-fpm                                Container running Nginx + PHP-FPM capable of…   613                                     [OK]</span><br><span class="line">jrcs/letsencrypt-nginx-proxy-companion                 LetsEncrypt container to use with nginx as p…   405                                     [OK]</span><br><span class="line">kong                                                   Open-source Microservice &amp; API Management la…   224                 [OK]</span><br><span class="line">webdevops/php-nginx                                    Nginx with PHP-FPM                              113                                     [OK]</span><br><span class="line">kitematic/hello-world-nginx                            A light-weight nginx container that demonstr…   108</span><br><span class="line">zabbix/zabbix-web-nginx-mysql                          Zabbix frontend based on Nginx web-server wi…   66                                      [OK]</span><br><span class="line">bitnami/nginx                                          Bitnami nginx Docker Image                      58                                      [OK]</span><br><span class="line">1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5   ubuntu-16-nginx-php-phpmyadmin-mysql-5          43                                      [OK]</span><br><span class="line">linuxserver/nginx                                      An Nginx container, brought to you by LinuxS…   39</span><br><span class="line">tobi312/rpi-nginx                                      NGINX on Raspberry Pi / armhf                   20                                      [OK]</span><br><span class="line">blacklabelops/nginx                                    Dockerized Nginx Reverse Proxy Server.          12                                      [OK]</span><br><span class="line">wodby/drupal-nginx                                     Nginx for Drupal container image                10                                      [OK]</span><br><span class="line">nginxdemos/hello                                       NGINX webserver that serves a simple page co…   8                                       [OK]</span><br><span class="line">webdevops/nginx                                        Nginx container                                 8                                       [OK]</span><br><span class="line">centos/nginx-18-centos7                                Platform for running nginx 1.8 or building n…   7</span><br><span class="line">centos/nginx-112-centos7                               Platform for running nginx 1.12 or building …   5</span><br><span class="line">1science/nginx                                         Nginx Docker images that include Consul Temp…   4                                       [OK]</span><br><span class="line">pebbletech/nginx-proxy                                 nginx-proxy sets up a container running ngin…   2                                       [OK]</span><br><span class="line">behance/docker-nginx                                   Provides base OS, patches and stable nginx f…   2                                       [OK]</span><br><span class="line">toccoag/openshift-nginx                                Nginx reverse proxy for Nice running on same…   1                                       [OK]</span><br><span class="line">travix/nginx                                           NGinx reverse proxy                             1                                       [OK]</span><br><span class="line">mailu/nginx                                            Mailu nginx frontend                            1                                       [OK]</span><br><span class="line">ansibleplaybookbundle/nginx-apb                        An APB to deploy NGINX                          0                                       [OK]</span><br></pre></td></tr></table></figure><p>选择官方的那种。。。OFFICIAl为OK表示很官方</p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">802b00ed6f79: Pull complete</span><br><span class="line">e9d0e0ea682b: Pull complete</span><br><span class="line">d8b7092b9221: Pull complete</span><br><span class="line">Digest: sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d3</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br></pre></td></tr></table></figure><p>latest表示最新的</p><h2 id="启动Nginx服务器"><a href="#启动Nginx服务器" class="headerlink" title="启动Nginx服务器"></a>启动Nginx服务器</h2><h2 id="COMMAND"><a href="#COMMAND" class="headerlink" title="COMMAND"></a>COMMAND</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker run -d -p 80:80 --name webserver nginx</span><br><span class="line">6a4d793e925f9ea4e7c7f4687279d03109ee33814a6dad12cba628cb5933eec4</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">6a4d793e925f        nginx               &quot;nginx -g &apos;daemon of…&quot;   16 seconds ago      Up 15 seconds       0.0.0.0:80-&gt;80/tcp   webserver</span><br></pre></td></tr></table></figure><h2 id="浏览器访问确认"><a href="#浏览器访问确认" class="headerlink" title="浏览器访问确认"></a>浏览器访问确认</h2><p>localhost默认为localhost:80</p><p><img src="https://s1.ax1x.com/2018/09/12/iAksOS.png" alt=""></p><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐<br>大家使用 docker exec 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">G:\Docker&gt;docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">6a4d793e925f        nginx               &quot;nginx -g &apos;daemon of…&quot;   16 seconds ago      Up 15 seconds       0.0.0.0:80-&gt;80/tcp   webserver</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker attach webserver</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker attach 6</span><br><span class="line"></span><br><span class="line">G:\Docker&gt;docker exec -it webserver bash</span><br><span class="line">root@6a4d793e925f:/# cd /usr/share/nginx</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx# ls</span><br><span class="line">html</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx# cat html</span><br><span class="line">cat: html: Is a directory</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx# cd /html</span><br><span class="line">bash: cd: /html: No such file or directory</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx# vim html</span><br><span class="line">bash: vim: command not found</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx# ls</span><br><span class="line">html</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx# cd html</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx/html# ls</span><br><span class="line">50x.html  index.html</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx/html# vim index.html</span><br><span class="line">bash: vim: command not found</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx/html# vi index.html</span><br><span class="line">bash: vi: command not found</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx/html# cd index.html</span><br><span class="line">bash: cd: index.html: Not a directory</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx/html# echo &quot;&lt;h1&gt;Hello Docker,Hello Nginx !&lt;h1/&gt;&quot; &gt; index.html</span><br><span class="line">bash: !: event not found</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx/html#  echo &quot;&lt;h1&gt;Hello Docker,Hello Nginx&lt;h1/&gt;&quot; &gt; index.html</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx/html# cat index.html</span><br><span class="line">&lt;h1&gt;Hello Docker,Hello Nginx&lt;h1/&gt;</span><br><span class="line">root@6a4d793e925f:/usr/share/nginx/html# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>看到熟悉的Linux命令提示符，发现自己有些命令忘了，本人习惯于windows10 pro。。。</p><h2 id="效果。。。"><a href="#效果。。。" class="headerlink" title="效果。。。"></a>效果。。。</h2><p><img src="https://s1.ax1x.com/2018/09/12/iAkry8.png" alt="Hello Docker"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;开始之前最好了解&lt;a href=&quot;https://www.docker.com/why-docker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;什么是Dockers&lt;/a&gt;以及&lt;a href=&quot;https://www.docker.com/customers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;为何使用Dockers&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是Dockers&quot;&gt;&lt;a href=&quot;#什么是Dockers&quot; class=&quot;headerlink&quot; title=&quot;什么是Dockers&quot;&gt;&lt;/a&gt;什么是Dockers&lt;/h2&gt;&lt;p&gt;将软件打包成标准化单元，用于开发、装运和部署&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用Dockers&quot;&gt;&lt;a href=&quot;#为什么要使用Dockers&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用Dockers&quot;&gt;&lt;/a&gt;为什么要使用Dockers&lt;/h2&gt;&lt;p&gt;了解容器和容器平台之间的差异，解决日益多样化的IT环境所需的条件以及企业在评估解决方案时应该考虑的能力&lt;/p&gt;
&lt;h3 id=&quot;对比传统虚拟机总结&quot;&gt;&lt;a href=&quot;#对比传统虚拟机总结&quot; class=&quot;headerlink&quot; title=&quot;对比传统虚拟机总结&quot;&gt;&lt;/a&gt;对比传统虚拟机总结&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;特性&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;容器&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;启动&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;秒级&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;硬盘容量&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;一般为MB&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;一般为GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;效能&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;接近原生&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;比较慢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;系统支援量&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://zoukeqing.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://zoukeqing.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Github pages + Hexo 搭建个人博客</title>
    <link href="https://zoukeqing.top/2018/09/11/github-hexo-blog/"/>
    <id>https://zoukeqing.top/2018/09/11/github-hexo-blog/</id>
    <published>2018-09-11T01:54:24.000Z</published>
    <updated>2018-09-13T03:35:17.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="准备环境（NodeJS-Git"><a href="#准备环境（NodeJS-Git" class="headerlink" title="准备环境（NodeJS+Git)"></a>准备环境（NodeJS+Git)</h2><ul><li><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodejs下载</a>之后，安装路径建议换到除C盘以外的硬盘上，比如我安装在<code>D:\nodejs</code>，其它的就默认next</p></li><li><p>安装结果输入命令测试结果，若出现版本则安装成功了。npm是NodeJS的包管理工具，可安装、卸载、更新、查看、搜索、发布等等。</p></li><li><p>改变环境配置npm的全局模块的存放路径以及cache的路径，提前新建好文件，然后输入以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix <span class="string">"D:\nodejs\Manual_setting\node_global"</span></span><br><span class="line">npm config set cache <span class="string">"D:\nodejs\Manual_setting\node_cache"</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>设置环境变量，将D:\nodejs\Manual_setting\node_global添加到系统变量path</p></li><li><p>安装淘宝镜像npm (cnpm)<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><code>cnpm -v</code> 测试结果，cnpm已安装到之前配置好的全局模块</p><p><img src="https://s1.ax1x.com/2018/09/11/ikFjXD.png" alt="cnpm -v"></p></li><li><p>git安装，<a href="https://jingyan.baidu.com/article/020278117cbe921bcc9ce51c.html" target="_blank" rel="noopener">参考百度</a></p></li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul><li><p>全局安装    </p><p>  <code>cnpm install hexo-cli -g</code></p></li><li><p>本地生成博客环境</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init Blog</span><br><span class="line">cd Blog</span><br><span class="line">cnpm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><ul><li><p>浏览器输入</p><p><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p><img src="https://s1.ax1x.com/2018/09/11/ikFLp6.png" alt=""></p></li></ul><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>我选的是NexT</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">git clone git@github.com:theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>在项目根目录下面修改_config.yml配置文件中的theme属性，将其设置为next</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>现在打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题</p><p><code>hexo generate</code> 可以简写为 <code>hexo g</code></p><p><code>hexo server</code> 可以间写为 <code>hexo s</code></p><p><code>hexo deloper</code> 可以简写为 <code>hexo d</code></p><h1 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h1><p>注册Github账号，创建repository，比如我创建 <a href="https://zoukeqing.github.io" target="_blank" rel="noopener">zoukeqing.github.io</a>，不要勾选README.md文件</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h3><p>我是从阿里云购买 <a href="zoukeqing.top">zoukeqing.top</a> ，当然你通过其它渠道购买也可以，只要能域名解析就行</p><h3 id="Ping-域名"><a href="#Ping-域名" class="headerlink" title="Ping 域名"></a>Ping 域名</h3><pre><code>![ping](https://s1.ax1x.com/2018/09/11/ikFbfx.png)</code></pre><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p><img src="https://s1.ax1x.com/2018/09/11/ikFX6O.png" alt="解析"></p><h2 id="新建CNAME文件"><a href="#新建CNAME文件" class="headerlink" title="新建CNAME文件"></a>新建CNAME文件</h2><p>在 <code>\themes\next\source</code> 目录下新建CNAME文件，无后缀名，加上自己的域名就可以，比如 <a href="zoukeqing.top">zoukeqing.top</a></p><h2 id="hexo-deploy部署"><a href="#hexo-deploy部署" class="headerlink" title="hexo deploy部署"></a>hexo deploy部署</h2><p>在项目根目录下配置文件_config.xml中作如下修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:zoukeqing/zoukeqing.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>提前安装一个扩展，用于<code>hexo deloper</code> 命令提交到Github项目中</p><p><code>npm install hexo-deployer-git --save</code></p><p>然后在命令 <code>hexo d</code>执行完成部署，打开Github项目文件就可看到提交上来的静态文件</p><h1 id="MarkDown写作"><a href="#MarkDown写作" class="headerlink" title="MarkDown写作"></a>MarkDown写作</h1><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><ul><li><p>新建一篇文章，会在 <code>\source\_posts</code> 目录下生成 <code>title.md</code> </p><p><code>hexo new &quot;title&quot;</code></p></li><li><p>新建页面，会在 <code>\source\page</code> 目录下生成 <code>index.md</code> </p><p><code>hexo new page &quot;page&quot;</code></p></li><li><p>发表草稿，不会在显示页面</p><p><code>hexo new tra &quot;caogao&quot;</code></p></li><li><p>将草稿发布</p><p><code>hexo public &quot;chage caogao to title&quot;</code></p></li></ul><h2 id="MarkDown编辑器"><a href="#MarkDown编辑器" class="headerlink" title="MarkDown编辑器"></a>MarkDown编辑器</h2><pre><code>[Typora](https://typora.io/#)    [HexoEditor](https://github.com/zhuzhuyule/HexoEditor)</code></pre><h1 id="访问量和文章阅读量"><a href="#访问量和文章阅读量" class="headerlink" title="访问量和文章阅读量"></a>访问量和文章阅读量</h1><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><ul><li><p>将配置文件下的 <code>busuanzi_count</code> 的属性 <code>enable</code> 修改为 <code>true</code> ，如果首页也需要文章阅读量可以选用LeanClound，同时将 <code>page_pv</code> 设置为 <code>false</code></p><p><img src="https://s1.ax1x.com/2018/09/11/ikF7kR.png" alt=""></p></li></ul><h2 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a></h2><blockquote><p>为什么要用LeanCloud是因为不蒜子存在一个缺点是，不能在首页直接看单篇文章的阅读量</p></blockquote><ul><li><p>创建新应用名为Counter</p></li><li><p>复制 <code>App ID</code>和<code>App Key</code></p></li><li><p>更改<code>主题配置文件</code> 的 <code>leancloud_visitors</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">你的id</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">你的key</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置安全域名"><a href="#设置安全域名" class="headerlink" title="设置安全域名"></a>设置安全域名</h3><blockquote><p>不设置安全域名是看不到数字的，同时也将本地 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 也添加进去，方便本地调试</p></blockquote><p><img src="https://s1.ax1x.com/2018/09/11/ikFHt1.png" alt=""></p><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><ul><li><p>提前安装一个扩展</p><p><code>cnpm install --save hexo-generator-search</code></p></li><li><p>将主题目录下 <code>_config.yml</code> 修改 <code>localhost_search</code> 的属性 <code>enable</code> 为 <code>true</code></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>在项目根目录下 <code>_config.yml</code> 添加一下代码</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h1 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h1><p>在主题配置文件中找到<strong>canvas_nest</strong>，设置成<strong>ture</strong></p><h1 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h1><ul><li><p>安装插件</p><p><code>cnpm install hexo-generator-feed --save</code></p></li><li><p>在项目根目录下 <code>_config.yml</code> 文件末添加 </p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure><ul><li>配置主题<code>_config.yml</code>文件，<code>ctrl+f</code>搜索<code>rss</code>，在后面加上<code>/atom.xml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><h1 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h1><p>在主题目录下配置 <code>_config.yml</code> 添加如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</span></span><br><span class="line"><span class="comment">#social:</span></span><br><span class="line">  <span class="comment">#LinkLabel: Link</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/halzhan</span></span><br><span class="line"><span class="attr">  Twitter:</span> <span class="attr">https://twitter.com/zoukeqing</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">gmailto:zoukeqing@gmail.com</span> <span class="string">or</span> <span class="attr">qqto:1146704412@qq.com</span></span><br></pre></td></tr></table></figure><h1 id="最后的效果"><a href="#最后的效果" class="headerlink" title="最后的效果"></a>最后的效果</h1><p><img src="https://s1.ax1x.com/2018/09/11/ikFO1K.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;准备环境（NodeJS-Git&quot;&gt;&lt;a href=&quot;#准备环境（NodeJS-Git&quot; class=&quot;headerlink&quot; title=&quot;准备环境（NodeJS+Git)&quot;&gt;&lt;/a&gt;准备环境（NodeJS+Git)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://nodejs.cn/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs下载&lt;/a&gt;之后，安装路径建议换到除C盘以外的硬盘上，比如我安装在&lt;code&gt;D:\nodejs&lt;/code&gt;，其它的就默认next&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装结果输入命令测试结果，若出现版本则安装成功了。npm是NodeJS的包管理工具，可安装、卸载、更新、查看、搜索、发布等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改变环境配置npm的全局模块的存放路径以及cache的路径，提前新建好文件，然后输入以下命令&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm config set prefix &lt;span class=&quot;string&quot;&gt;&quot;D:\nodejs\Manual_setting\node_global&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config set cache &lt;span class=&quot;string&quot;&gt;&quot;D:\nodejs\Manual_setting\node_cache&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Github" scheme="https://zoukeqing.top/categories/Github/"/>
    
      <category term="Github Pages" scheme="https://zoukeqing.top/categories/Github/Github-Pages/"/>
    
    
      <category term="Github" scheme="https://zoukeqing.top/tags/Github/"/>
    
      <category term="Hexo" scheme="https://zoukeqing.top/tags/Hexo/"/>
    
      <category term="Github Pages" scheme="https://zoukeqing.top/tags/Github-Pages/"/>
    
  </entry>
  
  <entry>
    <title>begin</title>
    <link href="https://zoukeqing.top/2018/09/10/begin/"/>
    <id>https://zoukeqing.top/2018/09/10/begin/</id>
    <published>2018-09-10T07:50:57.000Z</published>
    <updated>2018-09-11T02:56:38.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开始写作&quot;&gt;&lt;a href=&quot;#开始写作&quot; class=&quot;headerlink&quot; title=&quot;开始写作&quot;&gt;&lt;/a&gt;开始写作&lt;/h1&gt;
      
    
    </summary>
    
      <category term="开始吧" scheme="https://zoukeqing.top/categories/%E5%BC%80%E5%A7%8B%E5%90%A7/"/>
    
    
      <category term="begin" scheme="https://zoukeqing.top/tags/begin/"/>
    
  </entry>
  
</feed>
